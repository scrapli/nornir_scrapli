{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"nornir_scrapli \u00b6 nornir_scrapli -- scrapli 's and scrapli_netconf 's plugin for nornir!","title":"Nornir Scrapli"},{"location":"#nornir_scrapli","text":"nornir_scrapli -- scrapli 's and scrapli_netconf 's plugin for nornir!","title":"nornir_scrapli"},{"location":"about/code_of_conduct/","text":"Code of Conduct \u00b6 Be excellent to each other!","title":"Code of Conduct"},{"location":"about/code_of_conduct/#code-of-conduct","text":"Be excellent to each other!","title":"Code of Conduct"},{"location":"about/contributing/","text":"Contributing \u00b6 Thanks for thinking about contributing! Contributions are not expected, but are quite welcome. Contributions of all kinds are welcomed -- typos, doc updates, adding examples, bug fixes, and feature adds. Some notes on contributing: Please open a GitHub discussion topic for any potential feature adds/changes to discuss them prior to opening a PR, this way everyone has a chance to chime in and make sure we're all on the same page! Please open an issue to discuss any bugs/bug fixes prior to opening a PR. Once we all have discussed any adds/changes, pull requests are very much welcome and appreciated! All PRs should pass tests/CI linting -- checkout the Makefile for some shortcuts for linting and testing. Please include tests! Even simple/basic tests are better than nothing -- it helps make sure changes in the future don't break functionality or make things act in unexpected ways!","title":"Contributing"},{"location":"about/contributing/#contributing","text":"Thanks for thinking about contributing! Contributions are not expected, but are quite welcome. Contributions of all kinds are welcomed -- typos, doc updates, adding examples, bug fixes, and feature adds. Some notes on contributing: Please open a GitHub discussion topic for any potential feature adds/changes to discuss them prior to opening a PR, this way everyone has a chance to chime in and make sure we're all on the same page! Please open an issue to discuss any bugs/bug fixes prior to opening a PR. Once we all have discussed any adds/changes, pull requests are very much welcome and appreciated! All PRs should pass tests/CI linting -- checkout the Makefile for some shortcuts for linting and testing. Please include tests! Even simple/basic tests are better than nothing -- it helps make sure changes in the future don't break functionality or make things act in unexpected ways!","title":"Contributing"},{"location":"more_scrapli/scrapli/","text":"Scrapli \u00b6 scrapli ( docs ) is the \"parent\" scrapli library. Check it out if you need to connect to devices with telnet or ssh!","title":"Scrapli"},{"location":"more_scrapli/scrapli/#scrapli","text":"scrapli ( docs ) is the \"parent\" scrapli library. Check it out if you need to connect to devices with telnet or ssh!","title":"Scrapli"},{"location":"more_scrapli/scrapli_cfg/","text":"Scrapli Cfg \u00b6 scrapli_cfg ( docs ) is utility that accepts a scrapli Telnet or SSH connection and provides configuration management capabilities. scrapli_cfg allows you to load candidate configurations for merge or replace operations, generate diffs of the current vs candidate, and of course commit or abort the candidate configuration.","title":"Scrapli Cfg"},{"location":"more_scrapli/scrapli_cfg/#scrapli-cfg","text":"scrapli_cfg ( docs ) is utility that accepts a scrapli Telnet or SSH connection and provides configuration management capabilities. scrapli_cfg allows you to load candidate configurations for merge or replace operations, generate diffs of the current vs candidate, and of course commit or abort the candidate configuration.","title":"Scrapli Cfg"},{"location":"more_scrapli/scrapli_community/","text":"Scrapli Community \u00b6 If you would like to use scrapli, but the platform(s) that you work with are not supported in the \"core\" scrapli platforms, you should check out scrapli_community ! This is the place for users to share \"non-core\" scrapli platforms.","title":"Scrapli Community"},{"location":"more_scrapli/scrapli_community/#scrapli-community","text":"If you would like to use scrapli, but the platform(s) that you work with are not supported in the \"core\" scrapli platforms, you should check out scrapli_community ! This is the place for users to share \"non-core\" scrapli platforms.","title":"Scrapli Community"},{"location":"more_scrapli/scrapli_netconf/","text":"Scrapli Netconf \u00b6 scrapli_netconf ( docs ) is a netconf driver built on top of scrapli. The purpose of scrapli_netconf is to provide a fast, flexible, thoroughly tested, well typed, well documented, simple API that supports both synchronous and asynchronous usage. Working together scrapli and scrapli_netconf aim to provide a consistent (as is practical) look and feel when automating devices over telnet, SSH, or netconf (over SSH).","title":"Scrapli Netconf"},{"location":"more_scrapli/scrapli_netconf/#scrapli-netconf","text":"scrapli_netconf ( docs ) is a netconf driver built on top of scrapli. The purpose of scrapli_netconf is to provide a fast, flexible, thoroughly tested, well typed, well documented, simple API that supports both synchronous and asynchronous usage. Working together scrapli and scrapli_netconf aim to provide a consistent (as is practical) look and feel when automating devices over telnet, SSH, or netconf (over SSH).","title":"Scrapli Netconf"},{"location":"more_scrapli/scrapli_replay/","text":"Scrapli Replay \u00b6 scrapli_replay ( docs ) is a set of tools used to help test scrapli programs. scrapli_replay includes a utility to capture command input/output from real life servers and replay them in a semi-interactive fashion, as well as a pytest plugin that patches and records and replays session data (like vcr.py ) for scrapli connections.","title":"Scrapli Replay"},{"location":"more_scrapli/scrapli_replay/#scrapli-replay","text":"scrapli_replay ( docs ) is a set of tools used to help test scrapli programs. scrapli_replay includes a utility to capture command input/output from real life servers and replay them in a semi-interactive fashion, as well as a pytest plugin that patches and records and replays session data (like vcr.py ) for scrapli connections.","title":"Scrapli Replay"},{"location":"reference/SUMMARY/","text":"connection exceptions functions print_structured_result helper result tasks cfg abort_config commit_config diff_config get_config get_version load_config core get_prompt send_command send_commands send_commands_from_file send_config send_configs send_configs_from_file send_interactive netconf capabilities commit delete_config discard edit_config get get_config lock rpc unlock validate","title":"SUMMARY"},{"location":"reference/connection/","text":"nornir_scrapli.connection ScrapliConfig \u00b6 Scrapli connection plugin for nornir Source code in nornir_scrapli/connection.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 class ScrapliConfig : \"\"\"Scrapli connection plugin for nornir\"\"\" connection : ScrapliCfgPlatform @staticmethod def get_connection ( task : Task ) -> ScrapliCfgPlatform : \"\"\" Try to fetch scrapli-cfg conn, create it if it doesnt exist This is a little different than \"normal\" in that we dont have a connection and we dont create them in the \"normal\" nornir way -- we actually just steal the scrapli connection and wrap the scrapli_cfg bits around it. Args: task: nornir Task object Returns: ScrapliCfg Raises: N/A \"\"\" connection : ScrapliCfgPlatform try : connection = task . host . get_connection ( \"scrapli_cfg\" , task . nornir . config ) except AttributeError : task . host . connections [ \"scrapli_cfg\" ] = ScrapliConfig . spawn ( task = task ) connection = task . host . get_connection ( \"scrapli_cfg\" , task . nornir . config ) return connection @staticmethod def spawn ( task : Task ) -> \"ConnectionPlugin\" : \"\"\" Spawn a ScrapliConfig object for a nornir host This is a little different than \"normal\" in that we dont have a connection and we dont create them in the \"normal\" nornir way -- we actually just steal the scrapli connection and wrap the scrapli_cfg bits around it. Args: task: nornir Task object Returns: ScrapliConfig Raises: N/A \"\"\" scrapli_conn = task . host . get_connection ( \"scrapli\" , task . nornir . config ) scrapli_cfg_parameters = task . host . get_connection_parameters ( connection = \"scrapli_cfg\" ) # should always be a dict afaik, but typing doesnt appreciate the possibility it is None extras = scrapli_cfg_parameters . extras or {} # always overwrite `dedicated_connection` as we are *not* having a dedicated connection # since we are wrapping the \"normal\" scrapli connection! extras [ \"dedicated_connection\" ] = False final_scrapli_cfg_parameters : Dict [ str , Any ] = { \"conn\" : scrapli_conn , ** extras , } connection = ScrapliCfg ( ** final_scrapli_cfg_parameters ) scrapli_config_connection_obj = ScrapliConfig () scrapli_config_connection_obj . connection = connection scrapli_config_connection_obj . open () return scrapli_config_connection_obj def open ( self , * args : Any , ** kwargs : Any ) -> None : \"\"\" Override open method of normal nornir connection so we can coopt an existing conn Args: args: args for not dealing w/ overridden hings kwargs: kwargs for not dealing w/ overridden hings Returns: None Raises: N/A \"\"\" _ , _ = args , kwargs self . connection . prepare () def close ( self ) -> None : \"\"\" Override close method of normal nornir connection so we never close things Never closing allows us to not accidentally step on the underlying \"normal\" scrapli conn Args: N/A Returns: None Raises: N/A \"\"\" close () -> None \u00b6 Override close method of normal nornir connection so we never close things Never closing allows us to not accidentally step on the underlying \"normal\" scrapli conn Returns: Type Description None None Source code in nornir_scrapli/connection.py 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 def close ( self ) -> None : \"\"\" Override close method of normal nornir connection so we never close things Never closing allows us to not accidentally step on the underlying \"normal\" scrapli conn Args: N/A Returns: None Raises: N/A \"\"\" get_connection ( task : Task ) -> ScrapliCfgPlatform staticmethod \u00b6 Try to fetch scrapli-cfg conn, create it if it doesnt exist This is a little different than \"normal\" in that we dont have a connection and we dont create them in the \"normal\" nornir way -- we actually just steal the scrapli connection and wrap the scrapli_cfg bits around it. Parameters: Name Type Description Default task Task nornir Task object required Returns: Type Description ScrapliCfgPlatform ScrapliCfg Source code in nornir_scrapli/connection.py 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 @staticmethod def get_connection ( task : Task ) -> ScrapliCfgPlatform : \"\"\" Try to fetch scrapli-cfg conn, create it if it doesnt exist This is a little different than \"normal\" in that we dont have a connection and we dont create them in the \"normal\" nornir way -- we actually just steal the scrapli connection and wrap the scrapli_cfg bits around it. Args: task: nornir Task object Returns: ScrapliCfg Raises: N/A \"\"\" connection : ScrapliCfgPlatform try : connection = task . host . get_connection ( \"scrapli_cfg\" , task . nornir . config ) except AttributeError : task . host . connections [ \"scrapli_cfg\" ] = ScrapliConfig . spawn ( task = task ) connection = task . host . get_connection ( \"scrapli_cfg\" , task . nornir . config ) return connection open ( * args : Any , ** kwargs : Any ) -> None \u00b6 Override open method of normal nornir connection so we can coopt an existing conn Parameters: Name Type Description Default args args for not dealing w/ overridden hings required kwargs kwargs for not dealing w/ overridden hings required Returns: Type Description None None Source code in nornir_scrapli/connection.py 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 def open ( self , * args : Any , ** kwargs : Any ) -> None : \"\"\" Override open method of normal nornir connection so we can coopt an existing conn Args: args: args for not dealing w/ overridden hings kwargs: kwargs for not dealing w/ overridden hings Returns: None Raises: N/A \"\"\" _ , _ = args , kwargs self . connection . prepare () spawn ( task : Task ) -> ConnectionPlugin staticmethod \u00b6 Spawn a ScrapliConfig object for a nornir host This is a little different than \"normal\" in that we dont have a connection and we dont create them in the \"normal\" nornir way -- we actually just steal the scrapli connection and wrap the scrapli_cfg bits around it. Parameters: Name Type Description Default task Task nornir Task object required Returns: Type Description ConnectionPlugin ScrapliConfig Source code in nornir_scrapli/connection.py 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 @staticmethod def spawn ( task : Task ) -> \"ConnectionPlugin\" : \"\"\" Spawn a ScrapliConfig object for a nornir host This is a little different than \"normal\" in that we dont have a connection and we dont create them in the \"normal\" nornir way -- we actually just steal the scrapli connection and wrap the scrapli_cfg bits around it. Args: task: nornir Task object Returns: ScrapliConfig Raises: N/A \"\"\" scrapli_conn = task . host . get_connection ( \"scrapli\" , task . nornir . config ) scrapli_cfg_parameters = task . host . get_connection_parameters ( connection = \"scrapli_cfg\" ) # should always be a dict afaik, but typing doesnt appreciate the possibility it is None extras = scrapli_cfg_parameters . extras or {} # always overwrite `dedicated_connection` as we are *not* having a dedicated connection # since we are wrapping the \"normal\" scrapli connection! extras [ \"dedicated_connection\" ] = False final_scrapli_cfg_parameters : Dict [ str , Any ] = { \"conn\" : scrapli_conn , ** extras , } connection = ScrapliCfg ( ** final_scrapli_cfg_parameters ) scrapli_config_connection_obj = ScrapliConfig () scrapli_config_connection_obj . connection = connection scrapli_config_connection_obj . open () return scrapli_config_connection_obj ScrapliCore \u00b6 Scrapli connection plugin for nornir Source code in nornir_scrapli/connection.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 class ScrapliCore : \"\"\"Scrapli connection plugin for nornir\"\"\" def open ( self , hostname : Optional [ str ], username : Optional [ str ], password : Optional [ str ], port : Optional [ int ], platform : Optional [ str ], extras : Optional [ Dict [ str , Any ]] = None , configuration : Optional [ Config ] = None , ) -> None : \"\"\" Open a scrapli connection to a device Args: hostname: hostname from nornir inventory username: username from nornir inventory/connection_options for scrapli password: password from nornir inventory/connection_options for scrapli port: port from nornir inventory/connection_options for scrapli platform: platform from nornir inventory/connection_options for scrapli extras: extras dict from connection_options for scrapli -- pass all other scrapli arguments here configuration: nornir configuration Returns: None Raises: NornirScrapliInvalidPlatform: if no platform or an invalid scrapli/napalm platform string is provided \"\"\" extras = extras or {} # 99.9% configuration will always be passed here... but to be consistent w/ the other # plugins we'll leave the function signature same/same as the others global_config = configuration . dict () if configuration else {} parameters : Dict [ str , Any ] = { \"host\" : hostname , \"auth_username\" : username or \"\" , \"auth_password\" : password or \"\" , \"port\" : port or 22 , \"ssh_config_file\" : global_config . get ( \"ssh\" , {}) . get ( \"config_file\" , False ), } # will override any of the configs from global nornir config (such as ssh config file) with # options from \"extras\" (connection options) parameters . update ( extras ) if extras . get ( \"channel_log\" , False ) is True : # if channel_log value is just \"True\" we append the hostname so that we don't have a # single file for potentially hundreds (or more!) of devices which obviously won't # work very well. don't update the extras dict directly as that is probably coming from # group/default vars, so just push this right onto the new parameters' dict. parameters . update ({ \"channel_log\" : f \"scrapli_channel_ { hostname } .log\" }) if not platform : raise NornirScrapliInvalidPlatform ( f \"'platform' not provided in inventory for host ` { hostname } `\" ) final_platform : str = PLATFORM_MAP . get ( platform , platform ) if final_platform == \"generic\" : connection = GenericDriver ( ** parameters ) else : try : connection = Scrapli ( ** parameters , platform = final_platform ) except ScrapliModuleNotFound as exc : raise NornirScrapliInvalidPlatform ( f \"Provided platform ` { final_platform } ` is not a valid scrapli or napalm \" \"platform, or is not a valid scrapli-community platform.\" ) from exc connection . open () self . connection = connection # pylint: disable=W0201 def close ( self ) -> None : \"\"\" Close a scrapli connection to a device Args: N/A Returns: None Raises: N/A \"\"\" self . connection . close () close () -> None \u00b6 Close a scrapli connection to a device Returns: Type Description None None Source code in nornir_scrapli/connection.py 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 def close ( self ) -> None : \"\"\" Close a scrapli connection to a device Args: N/A Returns: None Raises: N/A \"\"\" self . connection . close () open ( hostname : Optional [ str ], username : Optional [ str ], password : Optional [ str ], port : Optional [ int ], platform : Optional [ str ], extras : Optional [ Dict [ str , Any ]] = None , configuration : Optional [ Config ] = None ) -> None \u00b6 Open a scrapli connection to a device Parameters: Name Type Description Default hostname Optional [ str ] hostname from nornir inventory required username Optional [ str ] username from nornir inventory/connection_options for scrapli required password Optional [ str ] password from nornir inventory/connection_options for scrapli required port Optional [ int ] port from nornir inventory/connection_options for scrapli required platform Optional [ str ] platform from nornir inventory/connection_options for scrapli required extras Optional [ Dict [ str , Any ]] extras dict from connection_options for scrapli -- pass all other scrapli arguments here None configuration Optional [ Config ] nornir configuration None Returns: Type Description None None Raises: Type Description NornirScrapliInvalidPlatform if no platform or an invalid scrapli/napalm platform string is provided Source code in nornir_scrapli/connection.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 def open ( self , hostname : Optional [ str ], username : Optional [ str ], password : Optional [ str ], port : Optional [ int ], platform : Optional [ str ], extras : Optional [ Dict [ str , Any ]] = None , configuration : Optional [ Config ] = None , ) -> None : \"\"\" Open a scrapli connection to a device Args: hostname: hostname from nornir inventory username: username from nornir inventory/connection_options for scrapli password: password from nornir inventory/connection_options for scrapli port: port from nornir inventory/connection_options for scrapli platform: platform from nornir inventory/connection_options for scrapli extras: extras dict from connection_options for scrapli -- pass all other scrapli arguments here configuration: nornir configuration Returns: None Raises: NornirScrapliInvalidPlatform: if no platform or an invalid scrapli/napalm platform string is provided \"\"\" extras = extras or {} # 99.9% configuration will always be passed here... but to be consistent w/ the other # plugins we'll leave the function signature same/same as the others global_config = configuration . dict () if configuration else {} parameters : Dict [ str , Any ] = { \"host\" : hostname , \"auth_username\" : username or \"\" , \"auth_password\" : password or \"\" , \"port\" : port or 22 , \"ssh_config_file\" : global_config . get ( \"ssh\" , {}) . get ( \"config_file\" , False ), } # will override any of the configs from global nornir config (such as ssh config file) with # options from \"extras\" (connection options) parameters . update ( extras ) if extras . get ( \"channel_log\" , False ) is True : # if channel_log value is just \"True\" we append the hostname so that we don't have a # single file for potentially hundreds (or more!) of devices which obviously won't # work very well. don't update the extras dict directly as that is probably coming from # group/default vars, so just push this right onto the new parameters' dict. parameters . update ({ \"channel_log\" : f \"scrapli_channel_ { hostname } .log\" }) if not platform : raise NornirScrapliInvalidPlatform ( f \"'platform' not provided in inventory for host ` { hostname } `\" ) final_platform : str = PLATFORM_MAP . get ( platform , platform ) if final_platform == \"generic\" : connection = GenericDriver ( ** parameters ) else : try : connection = Scrapli ( ** parameters , platform = final_platform ) except ScrapliModuleNotFound as exc : raise NornirScrapliInvalidPlatform ( f \"Provided platform ` { final_platform } ` is not a valid scrapli or napalm \" \"platform, or is not a valid scrapli-community platform.\" ) from exc connection . open () self . connection = connection # pylint: disable=W0201 ScrapliNetconf \u00b6 Scrapli NETCONF connection plugin for nornir Source code in nornir_scrapli/connection.py 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 class ScrapliNetconf : \"\"\"Scrapli NETCONF connection plugin for nornir\"\"\" def open ( self , hostname : Optional [ str ], username : Optional [ str ], password : Optional [ str ], port : Optional [ int ], platform : Optional [ str ], extras : Optional [ Dict [ str , Any ]] = None , configuration : Optional [ Config ] = None , ) -> None : \"\"\" Open a scrapli connection to a device Args: hostname: hostname from nornir inventory username: username from nornir inventory/connection_options for scrapli password: password from nornir inventory/connection_options for scrapli port: port from nornir inventory/connection_options for scrapli platform: platform from nornir inventory/connection_options for scrapli; ignored with scrapli netconf extras: extras dict from connection_options for scrapli -- pass all other scrapli arguments here configuration: nornir configuration Returns: None Raises: N/A \"\"\" # platform is irrelevant for scrapli netconf for now _ = platform extras = extras or {} # 99.9% configuration will always be passed here... but to be consistent w/ the other # plugins we'll leave the function signature same/same as the others global_config = configuration . dict () if configuration else {} parameters : Dict [ str , Any ] = { \"host\" : hostname , \"auth_username\" : username or \"\" , \"auth_password\" : password or \"\" , \"port\" : port or 830 , \"ssh_config_file\" : global_config . get ( \"ssh\" , {}) . get ( \"config_file\" , False ), } # will override any of the configs from global nornir config (such as ssh config file) with # options from \"extras\" (connection options) parameters . update ( extras ) connection = NetconfDriver ( ** parameters ) connection . open () self . connection = connection # pylint: disable=W0201 def close ( self ) -> None : \"\"\" Close a scrapli netconf connection to a device Args: N/A Returns: None Raises: N/A \"\"\" self . connection . close () close () -> None \u00b6 Close a scrapli netconf connection to a device Returns: Type Description None None Source code in nornir_scrapli/connection.py 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 def close ( self ) -> None : \"\"\" Close a scrapli netconf connection to a device Args: N/A Returns: None Raises: N/A \"\"\" self . connection . close () open ( hostname : Optional [ str ], username : Optional [ str ], password : Optional [ str ], port : Optional [ int ], platform : Optional [ str ], extras : Optional [ Dict [ str , Any ]] = None , configuration : Optional [ Config ] = None ) -> None \u00b6 Open a scrapli connection to a device Parameters: Name Type Description Default hostname Optional [ str ] hostname from nornir inventory required username Optional [ str ] username from nornir inventory/connection_options for scrapli required password Optional [ str ] password from nornir inventory/connection_options for scrapli required port Optional [ int ] port from nornir inventory/connection_options for scrapli required platform Optional [ str ] platform from nornir inventory/connection_options for scrapli; ignored with scrapli netconf required extras Optional [ Dict [ str , Any ]] extras dict from connection_options for scrapli -- pass all other scrapli arguments here None configuration Optional [ Config ] nornir configuration None Returns: Type Description None None Source code in nornir_scrapli/connection.py 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 def open ( self , hostname : Optional [ str ], username : Optional [ str ], password : Optional [ str ], port : Optional [ int ], platform : Optional [ str ], extras : Optional [ Dict [ str , Any ]] = None , configuration : Optional [ Config ] = None , ) -> None : \"\"\" Open a scrapli connection to a device Args: hostname: hostname from nornir inventory username: username from nornir inventory/connection_options for scrapli password: password from nornir inventory/connection_options for scrapli port: port from nornir inventory/connection_options for scrapli platform: platform from nornir inventory/connection_options for scrapli; ignored with scrapli netconf extras: extras dict from connection_options for scrapli -- pass all other scrapli arguments here configuration: nornir configuration Returns: None Raises: N/A \"\"\" # platform is irrelevant for scrapli netconf for now _ = platform extras = extras or {} # 99.9% configuration will always be passed here... but to be consistent w/ the other # plugins we'll leave the function signature same/same as the others global_config = configuration . dict () if configuration else {} parameters : Dict [ str , Any ] = { \"host\" : hostname , \"auth_username\" : username or \"\" , \"auth_password\" : password or \"\" , \"port\" : port or 830 , \"ssh_config_file\" : global_config . get ( \"ssh\" , {}) . get ( \"config_file\" , False ), } # will override any of the configs from global nornir config (such as ssh config file) with # options from \"extras\" (connection options) parameters . update ( extras ) connection = NetconfDriver ( ** parameters ) connection . open () self . connection = connection # pylint: disable=W0201","title":"connection"},{"location":"reference/connection/#connection.ScrapliConfig","text":"Scrapli connection plugin for nornir Source code in nornir_scrapli/connection.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 class ScrapliConfig : \"\"\"Scrapli connection plugin for nornir\"\"\" connection : ScrapliCfgPlatform @staticmethod def get_connection ( task : Task ) -> ScrapliCfgPlatform : \"\"\" Try to fetch scrapli-cfg conn, create it if it doesnt exist This is a little different than \"normal\" in that we dont have a connection and we dont create them in the \"normal\" nornir way -- we actually just steal the scrapli connection and wrap the scrapli_cfg bits around it. Args: task: nornir Task object Returns: ScrapliCfg Raises: N/A \"\"\" connection : ScrapliCfgPlatform try : connection = task . host . get_connection ( \"scrapli_cfg\" , task . nornir . config ) except AttributeError : task . host . connections [ \"scrapli_cfg\" ] = ScrapliConfig . spawn ( task = task ) connection = task . host . get_connection ( \"scrapli_cfg\" , task . nornir . config ) return connection @staticmethod def spawn ( task : Task ) -> \"ConnectionPlugin\" : \"\"\" Spawn a ScrapliConfig object for a nornir host This is a little different than \"normal\" in that we dont have a connection and we dont create them in the \"normal\" nornir way -- we actually just steal the scrapli connection and wrap the scrapli_cfg bits around it. Args: task: nornir Task object Returns: ScrapliConfig Raises: N/A \"\"\" scrapli_conn = task . host . get_connection ( \"scrapli\" , task . nornir . config ) scrapli_cfg_parameters = task . host . get_connection_parameters ( connection = \"scrapli_cfg\" ) # should always be a dict afaik, but typing doesnt appreciate the possibility it is None extras = scrapli_cfg_parameters . extras or {} # always overwrite `dedicated_connection` as we are *not* having a dedicated connection # since we are wrapping the \"normal\" scrapli connection! extras [ \"dedicated_connection\" ] = False final_scrapli_cfg_parameters : Dict [ str , Any ] = { \"conn\" : scrapli_conn , ** extras , } connection = ScrapliCfg ( ** final_scrapli_cfg_parameters ) scrapli_config_connection_obj = ScrapliConfig () scrapli_config_connection_obj . connection = connection scrapli_config_connection_obj . open () return scrapli_config_connection_obj def open ( self , * args : Any , ** kwargs : Any ) -> None : \"\"\" Override open method of normal nornir connection so we can coopt an existing conn Args: args: args for not dealing w/ overridden hings kwargs: kwargs for not dealing w/ overridden hings Returns: None Raises: N/A \"\"\" _ , _ = args , kwargs self . connection . prepare () def close ( self ) -> None : \"\"\" Override close method of normal nornir connection so we never close things Never closing allows us to not accidentally step on the underlying \"normal\" scrapli conn Args: N/A Returns: None Raises: N/A \"\"\"","title":"ScrapliConfig"},{"location":"reference/connection/#connection.ScrapliConfig.close","text":"Override close method of normal nornir connection so we never close things Never closing allows us to not accidentally step on the underlying \"normal\" scrapli conn Returns: Type Description None None Source code in nornir_scrapli/connection.py 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 def close ( self ) -> None : \"\"\" Override close method of normal nornir connection so we never close things Never closing allows us to not accidentally step on the underlying \"normal\" scrapli conn Args: N/A Returns: None Raises: N/A \"\"\"","title":"close()"},{"location":"reference/connection/#connection.ScrapliConfig.get_connection","text":"Try to fetch scrapli-cfg conn, create it if it doesnt exist This is a little different than \"normal\" in that we dont have a connection and we dont create them in the \"normal\" nornir way -- we actually just steal the scrapli connection and wrap the scrapli_cfg bits around it. Parameters: Name Type Description Default task Task nornir Task object required Returns: Type Description ScrapliCfgPlatform ScrapliCfg Source code in nornir_scrapli/connection.py 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 @staticmethod def get_connection ( task : Task ) -> ScrapliCfgPlatform : \"\"\" Try to fetch scrapli-cfg conn, create it if it doesnt exist This is a little different than \"normal\" in that we dont have a connection and we dont create them in the \"normal\" nornir way -- we actually just steal the scrapli connection and wrap the scrapli_cfg bits around it. Args: task: nornir Task object Returns: ScrapliCfg Raises: N/A \"\"\" connection : ScrapliCfgPlatform try : connection = task . host . get_connection ( \"scrapli_cfg\" , task . nornir . config ) except AttributeError : task . host . connections [ \"scrapli_cfg\" ] = ScrapliConfig . spawn ( task = task ) connection = task . host . get_connection ( \"scrapli_cfg\" , task . nornir . config ) return connection","title":"get_connection()"},{"location":"reference/connection/#connection.ScrapliConfig.open","text":"Override open method of normal nornir connection so we can coopt an existing conn Parameters: Name Type Description Default args args for not dealing w/ overridden hings required kwargs kwargs for not dealing w/ overridden hings required Returns: Type Description None None Source code in nornir_scrapli/connection.py 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 def open ( self , * args : Any , ** kwargs : Any ) -> None : \"\"\" Override open method of normal nornir connection so we can coopt an existing conn Args: args: args for not dealing w/ overridden hings kwargs: kwargs for not dealing w/ overridden hings Returns: None Raises: N/A \"\"\" _ , _ = args , kwargs self . connection . prepare ()","title":"open()"},{"location":"reference/connection/#connection.ScrapliConfig.spawn","text":"Spawn a ScrapliConfig object for a nornir host This is a little different than \"normal\" in that we dont have a connection and we dont create them in the \"normal\" nornir way -- we actually just steal the scrapli connection and wrap the scrapli_cfg bits around it. Parameters: Name Type Description Default task Task nornir Task object required Returns: Type Description ConnectionPlugin ScrapliConfig Source code in nornir_scrapli/connection.py 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 @staticmethod def spawn ( task : Task ) -> \"ConnectionPlugin\" : \"\"\" Spawn a ScrapliConfig object for a nornir host This is a little different than \"normal\" in that we dont have a connection and we dont create them in the \"normal\" nornir way -- we actually just steal the scrapli connection and wrap the scrapli_cfg bits around it. Args: task: nornir Task object Returns: ScrapliConfig Raises: N/A \"\"\" scrapli_conn = task . host . get_connection ( \"scrapli\" , task . nornir . config ) scrapli_cfg_parameters = task . host . get_connection_parameters ( connection = \"scrapli_cfg\" ) # should always be a dict afaik, but typing doesnt appreciate the possibility it is None extras = scrapli_cfg_parameters . extras or {} # always overwrite `dedicated_connection` as we are *not* having a dedicated connection # since we are wrapping the \"normal\" scrapli connection! extras [ \"dedicated_connection\" ] = False final_scrapli_cfg_parameters : Dict [ str , Any ] = { \"conn\" : scrapli_conn , ** extras , } connection = ScrapliCfg ( ** final_scrapli_cfg_parameters ) scrapli_config_connection_obj = ScrapliConfig () scrapli_config_connection_obj . connection = connection scrapli_config_connection_obj . open () return scrapli_config_connection_obj","title":"spawn()"},{"location":"reference/connection/#connection.ScrapliCore","text":"Scrapli connection plugin for nornir Source code in nornir_scrapli/connection.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 class ScrapliCore : \"\"\"Scrapli connection plugin for nornir\"\"\" def open ( self , hostname : Optional [ str ], username : Optional [ str ], password : Optional [ str ], port : Optional [ int ], platform : Optional [ str ], extras : Optional [ Dict [ str , Any ]] = None , configuration : Optional [ Config ] = None , ) -> None : \"\"\" Open a scrapli connection to a device Args: hostname: hostname from nornir inventory username: username from nornir inventory/connection_options for scrapli password: password from nornir inventory/connection_options for scrapli port: port from nornir inventory/connection_options for scrapli platform: platform from nornir inventory/connection_options for scrapli extras: extras dict from connection_options for scrapli -- pass all other scrapli arguments here configuration: nornir configuration Returns: None Raises: NornirScrapliInvalidPlatform: if no platform or an invalid scrapli/napalm platform string is provided \"\"\" extras = extras or {} # 99.9% configuration will always be passed here... but to be consistent w/ the other # plugins we'll leave the function signature same/same as the others global_config = configuration . dict () if configuration else {} parameters : Dict [ str , Any ] = { \"host\" : hostname , \"auth_username\" : username or \"\" , \"auth_password\" : password or \"\" , \"port\" : port or 22 , \"ssh_config_file\" : global_config . get ( \"ssh\" , {}) . get ( \"config_file\" , False ), } # will override any of the configs from global nornir config (such as ssh config file) with # options from \"extras\" (connection options) parameters . update ( extras ) if extras . get ( \"channel_log\" , False ) is True : # if channel_log value is just \"True\" we append the hostname so that we don't have a # single file for potentially hundreds (or more!) of devices which obviously won't # work very well. don't update the extras dict directly as that is probably coming from # group/default vars, so just push this right onto the new parameters' dict. parameters . update ({ \"channel_log\" : f \"scrapli_channel_ { hostname } .log\" }) if not platform : raise NornirScrapliInvalidPlatform ( f \"'platform' not provided in inventory for host ` { hostname } `\" ) final_platform : str = PLATFORM_MAP . get ( platform , platform ) if final_platform == \"generic\" : connection = GenericDriver ( ** parameters ) else : try : connection = Scrapli ( ** parameters , platform = final_platform ) except ScrapliModuleNotFound as exc : raise NornirScrapliInvalidPlatform ( f \"Provided platform ` { final_platform } ` is not a valid scrapli or napalm \" \"platform, or is not a valid scrapli-community platform.\" ) from exc connection . open () self . connection = connection # pylint: disable=W0201 def close ( self ) -> None : \"\"\" Close a scrapli connection to a device Args: N/A Returns: None Raises: N/A \"\"\" self . connection . close ()","title":"ScrapliCore"},{"location":"reference/connection/#connection.ScrapliCore.close","text":"Close a scrapli connection to a device Returns: Type Description None None Source code in nornir_scrapli/connection.py 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 def close ( self ) -> None : \"\"\" Close a scrapli connection to a device Args: N/A Returns: None Raises: N/A \"\"\" self . connection . close ()","title":"close()"},{"location":"reference/connection/#connection.ScrapliCore.open","text":"Open a scrapli connection to a device Parameters: Name Type Description Default hostname Optional [ str ] hostname from nornir inventory required username Optional [ str ] username from nornir inventory/connection_options for scrapli required password Optional [ str ] password from nornir inventory/connection_options for scrapli required port Optional [ int ] port from nornir inventory/connection_options for scrapli required platform Optional [ str ] platform from nornir inventory/connection_options for scrapli required extras Optional [ Dict [ str , Any ]] extras dict from connection_options for scrapli -- pass all other scrapli arguments here None configuration Optional [ Config ] nornir configuration None Returns: Type Description None None Raises: Type Description NornirScrapliInvalidPlatform if no platform or an invalid scrapli/napalm platform string is provided Source code in nornir_scrapli/connection.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 def open ( self , hostname : Optional [ str ], username : Optional [ str ], password : Optional [ str ], port : Optional [ int ], platform : Optional [ str ], extras : Optional [ Dict [ str , Any ]] = None , configuration : Optional [ Config ] = None , ) -> None : \"\"\" Open a scrapli connection to a device Args: hostname: hostname from nornir inventory username: username from nornir inventory/connection_options for scrapli password: password from nornir inventory/connection_options for scrapli port: port from nornir inventory/connection_options for scrapli platform: platform from nornir inventory/connection_options for scrapli extras: extras dict from connection_options for scrapli -- pass all other scrapli arguments here configuration: nornir configuration Returns: None Raises: NornirScrapliInvalidPlatform: if no platform or an invalid scrapli/napalm platform string is provided \"\"\" extras = extras or {} # 99.9% configuration will always be passed here... but to be consistent w/ the other # plugins we'll leave the function signature same/same as the others global_config = configuration . dict () if configuration else {} parameters : Dict [ str , Any ] = { \"host\" : hostname , \"auth_username\" : username or \"\" , \"auth_password\" : password or \"\" , \"port\" : port or 22 , \"ssh_config_file\" : global_config . get ( \"ssh\" , {}) . get ( \"config_file\" , False ), } # will override any of the configs from global nornir config (such as ssh config file) with # options from \"extras\" (connection options) parameters . update ( extras ) if extras . get ( \"channel_log\" , False ) is True : # if channel_log value is just \"True\" we append the hostname so that we don't have a # single file for potentially hundreds (or more!) of devices which obviously won't # work very well. don't update the extras dict directly as that is probably coming from # group/default vars, so just push this right onto the new parameters' dict. parameters . update ({ \"channel_log\" : f \"scrapli_channel_ { hostname } .log\" }) if not platform : raise NornirScrapliInvalidPlatform ( f \"'platform' not provided in inventory for host ` { hostname } `\" ) final_platform : str = PLATFORM_MAP . get ( platform , platform ) if final_platform == \"generic\" : connection = GenericDriver ( ** parameters ) else : try : connection = Scrapli ( ** parameters , platform = final_platform ) except ScrapliModuleNotFound as exc : raise NornirScrapliInvalidPlatform ( f \"Provided platform ` { final_platform } ` is not a valid scrapli or napalm \" \"platform, or is not a valid scrapli-community platform.\" ) from exc connection . open () self . connection = connection # pylint: disable=W0201","title":"open()"},{"location":"reference/connection/#connection.ScrapliNetconf","text":"Scrapli NETCONF connection plugin for nornir Source code in nornir_scrapli/connection.py 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 class ScrapliNetconf : \"\"\"Scrapli NETCONF connection plugin for nornir\"\"\" def open ( self , hostname : Optional [ str ], username : Optional [ str ], password : Optional [ str ], port : Optional [ int ], platform : Optional [ str ], extras : Optional [ Dict [ str , Any ]] = None , configuration : Optional [ Config ] = None , ) -> None : \"\"\" Open a scrapli connection to a device Args: hostname: hostname from nornir inventory username: username from nornir inventory/connection_options for scrapli password: password from nornir inventory/connection_options for scrapli port: port from nornir inventory/connection_options for scrapli platform: platform from nornir inventory/connection_options for scrapli; ignored with scrapli netconf extras: extras dict from connection_options for scrapli -- pass all other scrapli arguments here configuration: nornir configuration Returns: None Raises: N/A \"\"\" # platform is irrelevant for scrapli netconf for now _ = platform extras = extras or {} # 99.9% configuration will always be passed here... but to be consistent w/ the other # plugins we'll leave the function signature same/same as the others global_config = configuration . dict () if configuration else {} parameters : Dict [ str , Any ] = { \"host\" : hostname , \"auth_username\" : username or \"\" , \"auth_password\" : password or \"\" , \"port\" : port or 830 , \"ssh_config_file\" : global_config . get ( \"ssh\" , {}) . get ( \"config_file\" , False ), } # will override any of the configs from global nornir config (such as ssh config file) with # options from \"extras\" (connection options) parameters . update ( extras ) connection = NetconfDriver ( ** parameters ) connection . open () self . connection = connection # pylint: disable=W0201 def close ( self ) -> None : \"\"\" Close a scrapli netconf connection to a device Args: N/A Returns: None Raises: N/A \"\"\" self . connection . close ()","title":"ScrapliNetconf"},{"location":"reference/connection/#connection.ScrapliNetconf.close","text":"Close a scrapli netconf connection to a device Returns: Type Description None None Source code in nornir_scrapli/connection.py 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 def close ( self ) -> None : \"\"\" Close a scrapli netconf connection to a device Args: N/A Returns: None Raises: N/A \"\"\" self . connection . close ()","title":"close()"},{"location":"reference/connection/#connection.ScrapliNetconf.open","text":"Open a scrapli connection to a device Parameters: Name Type Description Default hostname Optional [ str ] hostname from nornir inventory required username Optional [ str ] username from nornir inventory/connection_options for scrapli required password Optional [ str ] password from nornir inventory/connection_options for scrapli required port Optional [ int ] port from nornir inventory/connection_options for scrapli required platform Optional [ str ] platform from nornir inventory/connection_options for scrapli; ignored with scrapli netconf required extras Optional [ Dict [ str , Any ]] extras dict from connection_options for scrapli -- pass all other scrapli arguments here None configuration Optional [ Config ] nornir configuration None Returns: Type Description None None Source code in nornir_scrapli/connection.py 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 def open ( self , hostname : Optional [ str ], username : Optional [ str ], password : Optional [ str ], port : Optional [ int ], platform : Optional [ str ], extras : Optional [ Dict [ str , Any ]] = None , configuration : Optional [ Config ] = None , ) -> None : \"\"\" Open a scrapli connection to a device Args: hostname: hostname from nornir inventory username: username from nornir inventory/connection_options for scrapli password: password from nornir inventory/connection_options for scrapli port: port from nornir inventory/connection_options for scrapli platform: platform from nornir inventory/connection_options for scrapli; ignored with scrapli netconf extras: extras dict from connection_options for scrapli -- pass all other scrapli arguments here configuration: nornir configuration Returns: None Raises: N/A \"\"\" # platform is irrelevant for scrapli netconf for now _ = platform extras = extras or {} # 99.9% configuration will always be passed here... but to be consistent w/ the other # plugins we'll leave the function signature same/same as the others global_config = configuration . dict () if configuration else {} parameters : Dict [ str , Any ] = { \"host\" : hostname , \"auth_username\" : username or \"\" , \"auth_password\" : password or \"\" , \"port\" : port or 830 , \"ssh_config_file\" : global_config . get ( \"ssh\" , {}) . get ( \"config_file\" , False ), } # will override any of the configs from global nornir config (such as ssh config file) with # options from \"extras\" (connection options) parameters . update ( extras ) connection = NetconfDriver ( ** parameters ) connection . open () self . connection = connection # pylint: disable=W0201","title":"open()"},{"location":"reference/exceptions/","text":"nornir_scrapli.exceptions NornirScrapliException \u00b6 Bases: Exception nornir_scrapli base exception Source code in nornir_scrapli/exceptions.py 4 5 class NornirScrapliException ( Exception ): \"\"\"nornir_scrapli base exception\"\"\" NornirScrapliInvalidPlatform \u00b6 Bases: NornirScrapliException nornir_scrapli base exception Source code in nornir_scrapli/exceptions.py 8 9 class NornirScrapliInvalidPlatform ( NornirScrapliException ): \"\"\"nornir_scrapli base exception\"\"\" NornirScrapliNoConfigModeGenericDriver \u00b6 Bases: NornirScrapliException nornir_scrapli exception for attempting config mode on generic platform Source code in nornir_scrapli/exceptions.py 12 13 class NornirScrapliNoConfigModeGenericDriver ( NornirScrapliException ): \"\"\"nornir_scrapli exception for attempting config mode on generic platform\"\"\"","title":"exceptions"},{"location":"reference/exceptions/#exceptions.NornirScrapliException","text":"Bases: Exception nornir_scrapli base exception Source code in nornir_scrapli/exceptions.py 4 5 class NornirScrapliException ( Exception ): \"\"\"nornir_scrapli base exception\"\"\"","title":"NornirScrapliException"},{"location":"reference/exceptions/#exceptions.NornirScrapliInvalidPlatform","text":"Bases: NornirScrapliException nornir_scrapli base exception Source code in nornir_scrapli/exceptions.py 8 9 class NornirScrapliInvalidPlatform ( NornirScrapliException ): \"\"\"nornir_scrapli base exception\"\"\"","title":"NornirScrapliInvalidPlatform"},{"location":"reference/exceptions/#exceptions.NornirScrapliNoConfigModeGenericDriver","text":"Bases: NornirScrapliException nornir_scrapli exception for attempting config mode on generic platform Source code in nornir_scrapli/exceptions.py 12 13 class NornirScrapliNoConfigModeGenericDriver ( NornirScrapliException ): \"\"\"nornir_scrapli exception for attempting config mode on generic platform\"\"\"","title":"NornirScrapliNoConfigModeGenericDriver"},{"location":"reference/helper/","text":"nornir_scrapli.helper diff_xml_text ( document_one : str , document_two : str ) -> str \u00b6 Diff xml text strings Really could be just \"diff text\" but also ensuring we ignore the \"message-id\" lines. This is really pretty simple and not always super great, but better than nothing for now! Parameters: Name Type Description Default document_one str string of xml doc 1 required document_two str string of xml doc 2 required Returns: Name Type Description str str unified diff of the two input documents Source code in nornir_scrapli/helper.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 def diff_xml_text ( document_one : str , document_two : str ) -> str : \"\"\" Diff xml text strings Really could be just \"diff text\" but also ensuring we ignore the \"message-id\" lines. This is really pretty simple and not always super great, but better than nothing for now! Args: document_one: string of xml doc 1 document_two: string of xml doc 2 Returns: str: unified diff of the two input documents Raises: N/A \"\"\" # ignore message-id stuff -- maybe more in the future? document_one_lines = [ line for line in document_one . splitlines () if \"message-id\" not in line ] document_two_lines = [ line for line in document_two . splitlines () if \"message-id\" not in line ] diff = difflib . unified_diff ( document_one_lines , document_two_lines ) diff_lines = [] for line in diff : if line . startswith ( \"---\" ) or line . startswith ( \"+++\" ): # may as well just strip out the header lines and such, we dont care about them continue if line . startswith ( \"+\" ): diff_lines . append ( f \" { ANSI_GREEN }{ line }{ ANSI_END } \" ) elif line . startswith ( \"-\" ): diff_lines . append ( f \" { ANSI_RED }{ line }{ ANSI_END } \" ) else : diff_lines . append ( line ) return \" \\n \" . join ( diff_lines )","title":"helper"},{"location":"reference/helper/#helper.diff_xml_text","text":"Diff xml text strings Really could be just \"diff text\" but also ensuring we ignore the \"message-id\" lines. This is really pretty simple and not always super great, but better than nothing for now! Parameters: Name Type Description Default document_one str string of xml doc 1 required document_two str string of xml doc 2 required Returns: Name Type Description str str unified diff of the two input documents Source code in nornir_scrapli/helper.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 def diff_xml_text ( document_one : str , document_two : str ) -> str : \"\"\" Diff xml text strings Really could be just \"diff text\" but also ensuring we ignore the \"message-id\" lines. This is really pretty simple and not always super great, but better than nothing for now! Args: document_one: string of xml doc 1 document_two: string of xml doc 2 Returns: str: unified diff of the two input documents Raises: N/A \"\"\" # ignore message-id stuff -- maybe more in the future? document_one_lines = [ line for line in document_one . splitlines () if \"message-id\" not in line ] document_two_lines = [ line for line in document_two . splitlines () if \"message-id\" not in line ] diff = difflib . unified_diff ( document_one_lines , document_two_lines ) diff_lines = [] for line in diff : if line . startswith ( \"---\" ) or line . startswith ( \"+++\" ): # may as well just strip out the header lines and such, we dont care about them continue if line . startswith ( \"+\" ): diff_lines . append ( f \" { ANSI_GREEN }{ line }{ ANSI_END } \" ) elif line . startswith ( \"-\" ): diff_lines . append ( f \" { ANSI_RED }{ line }{ ANSI_END } \" ) else : diff_lines . append ( line ) return \" \\n \" . join ( diff_lines )","title":"diff_xml_text()"},{"location":"reference/result/","text":"nornir_scrapli.result ScrapliResult \u00b6 Bases: Result Source code in nornir_scrapli/result.py 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 class ScrapliResult ( Result ): def __init__ ( self , host : \"Host\" , result : Optional [ str ], scrapli_response : Optional [ Union [ Response , MultiResponse , ScrapliCfgResponse ]] = None , changed : bool = False , ** kwargs : Any , ): \"\"\" Scrapli Nornir Result object A \"normal\" nornir result object with an additional attribute \"scrapli_response\" which houses the original response object returned from scrapli Args: host: nornir task host object result: result text returned from scrapli task scrapli_response: original response object returned from scrapli task changed: bool indicating if a change has occurred kwargs: keyword arguments to pass to nornir Result Returns: N/A # noqa: DAR202 Raises: N/A \"\"\" failed = self . _process_failed ( scrapli_response = scrapli_response ) super () . __init__ ( host = host , result = result , failed = failed , changed = changed , ** kwargs ) self . scrapli_response = scrapli_response @staticmethod def _process_failed ( scrapli_response : Optional [ Union [ Response , MultiResponse , ScrapliCfgResponse ]] ) -> bool : \"\"\" Process and return string of scrapli response(s) Args: scrapli_response: scrapli Response or MultiResponse object Returns: bool: bool indicating if the nornir task failed Raises: N/A \"\"\" if scrapli_response is None : return False if isinstance ( scrapli_response , ( Response , ScrapliCfgResponse )): failed : bool = scrapli_response . failed return failed if any ( response . failed for response in scrapli_response ): return True return False __init__ ( host : Host , result : Optional [ str ], scrapli_response : Optional [ Union [ Response , MultiResponse , ScrapliCfgResponse ]] = None , changed : bool = False , ** kwargs : Any ) \u00b6 Scrapli Nornir Result object A \"normal\" nornir result object with an additional attribute \"scrapli_response\" which houses the original response object returned from scrapli Parameters: Name Type Description Default host Host nornir task host object required result Optional [ str ] result text returned from scrapli task required scrapli_response Optional [ Union [ Response , MultiResponse , ScrapliCfgResponse ]] original response object returned from scrapli task None changed bool bool indicating if a change has occurred False kwargs keyword arguments to pass to nornir Result required Returns: Type Description N/A # noqa: DAR202 Source code in nornir_scrapli/result.py 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 def __init__ ( self , host : \"Host\" , result : Optional [ str ], scrapli_response : Optional [ Union [ Response , MultiResponse , ScrapliCfgResponse ]] = None , changed : bool = False , ** kwargs : Any , ): \"\"\" Scrapli Nornir Result object A \"normal\" nornir result object with an additional attribute \"scrapli_response\" which houses the original response object returned from scrapli Args: host: nornir task host object result: result text returned from scrapli task scrapli_response: original response object returned from scrapli task changed: bool indicating if a change has occurred kwargs: keyword arguments to pass to nornir Result Returns: N/A # noqa: DAR202 Raises: N/A \"\"\" failed = self . _process_failed ( scrapli_response = scrapli_response ) super () . __init__ ( host = host , result = result , failed = failed , changed = changed , ** kwargs ) self . scrapli_response = scrapli_response process_command_result ( scrapli_response : Union [ Response , MultiResponse ]) -> str \u00b6 Process and return string of scrapli response(s) Parameters: Name Type Description Default scrapli_response Union [ Response , MultiResponse ] scrapli Response or MultiResponse object required Returns: Name Type Description str str string result from nornir task or None Source code in nornir_scrapli/result.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 def process_command_result ( scrapli_response : Union [ Response , MultiResponse ]) -> str : \"\"\" Process and return string of scrapli response(s) Args: scrapli_response: scrapli Response or MultiResponse object Returns: str: string result from nornir task or None Raises: N/A \"\"\" if isinstance ( scrapli_response , Response ): result : str = scrapli_response . result return result return \" \\n\\n \" . join ([ response . result for response in scrapli_response ]) process_config_result ( scrapli_response : Union [ Response , MultiResponse ]) -> str \u00b6 Process and return string of scrapli response(s) Parameters: Name Type Description Default scrapli_response Union [ Response , MultiResponse ] scrapli Response or MultiResponse object required Returns: Name Type Description str str string result from nornir task or None Source code in nornir_scrapli/result.py 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 def process_config_result ( scrapli_response : Union [ Response , MultiResponse ]) -> str : \"\"\" Process and return string of scrapli response(s) Args: scrapli_response: scrapli Response or MultiResponse object Returns: str: string result from nornir task or None Raises: N/A \"\"\" full_results = \"\" if isinstance ( scrapli_response , Response ): for config_input , config_result in zip ( scrapli_response . channel_input . split ( \" \\n \" ), scrapli_response . result . split ( \" \\n \" ) ): if config_input == config_result : full_results += f \" { config_input } \\n \" else : full_results += \" \\n \" . join ([ config_input , config_result ]) else : for response in scrapli_response : full_results += \" \\n \" . join ([ response . channel_input , response . result ]) return full_results","title":"result"},{"location":"reference/result/#result.ScrapliResult","text":"Bases: Result Source code in nornir_scrapli/result.py 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 class ScrapliResult ( Result ): def __init__ ( self , host : \"Host\" , result : Optional [ str ], scrapli_response : Optional [ Union [ Response , MultiResponse , ScrapliCfgResponse ]] = None , changed : bool = False , ** kwargs : Any , ): \"\"\" Scrapli Nornir Result object A \"normal\" nornir result object with an additional attribute \"scrapli_response\" which houses the original response object returned from scrapli Args: host: nornir task host object result: result text returned from scrapli task scrapli_response: original response object returned from scrapli task changed: bool indicating if a change has occurred kwargs: keyword arguments to pass to nornir Result Returns: N/A # noqa: DAR202 Raises: N/A \"\"\" failed = self . _process_failed ( scrapli_response = scrapli_response ) super () . __init__ ( host = host , result = result , failed = failed , changed = changed , ** kwargs ) self . scrapli_response = scrapli_response @staticmethod def _process_failed ( scrapli_response : Optional [ Union [ Response , MultiResponse , ScrapliCfgResponse ]] ) -> bool : \"\"\" Process and return string of scrapli response(s) Args: scrapli_response: scrapli Response or MultiResponse object Returns: bool: bool indicating if the nornir task failed Raises: N/A \"\"\" if scrapli_response is None : return False if isinstance ( scrapli_response , ( Response , ScrapliCfgResponse )): failed : bool = scrapli_response . failed return failed if any ( response . failed for response in scrapli_response ): return True return False","title":"ScrapliResult"},{"location":"reference/result/#result.ScrapliResult.__init__","text":"Scrapli Nornir Result object A \"normal\" nornir result object with an additional attribute \"scrapli_response\" which houses the original response object returned from scrapli Parameters: Name Type Description Default host Host nornir task host object required result Optional [ str ] result text returned from scrapli task required scrapli_response Optional [ Union [ Response , MultiResponse , ScrapliCfgResponse ]] original response object returned from scrapli task None changed bool bool indicating if a change has occurred False kwargs keyword arguments to pass to nornir Result required Returns: Type Description N/A # noqa: DAR202 Source code in nornir_scrapli/result.py 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 def __init__ ( self , host : \"Host\" , result : Optional [ str ], scrapli_response : Optional [ Union [ Response , MultiResponse , ScrapliCfgResponse ]] = None , changed : bool = False , ** kwargs : Any , ): \"\"\" Scrapli Nornir Result object A \"normal\" nornir result object with an additional attribute \"scrapli_response\" which houses the original response object returned from scrapli Args: host: nornir task host object result: result text returned from scrapli task scrapli_response: original response object returned from scrapli task changed: bool indicating if a change has occurred kwargs: keyword arguments to pass to nornir Result Returns: N/A # noqa: DAR202 Raises: N/A \"\"\" failed = self . _process_failed ( scrapli_response = scrapli_response ) super () . __init__ ( host = host , result = result , failed = failed , changed = changed , ** kwargs ) self . scrapli_response = scrapli_response","title":"__init__()"},{"location":"reference/result/#result.process_command_result","text":"Process and return string of scrapli response(s) Parameters: Name Type Description Default scrapli_response Union [ Response , MultiResponse ] scrapli Response or MultiResponse object required Returns: Name Type Description str str string result from nornir task or None Source code in nornir_scrapli/result.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 def process_command_result ( scrapli_response : Union [ Response , MultiResponse ]) -> str : \"\"\" Process and return string of scrapli response(s) Args: scrapli_response: scrapli Response or MultiResponse object Returns: str: string result from nornir task or None Raises: N/A \"\"\" if isinstance ( scrapli_response , Response ): result : str = scrapli_response . result return result return \" \\n\\n \" . join ([ response . result for response in scrapli_response ])","title":"process_command_result()"},{"location":"reference/result/#result.process_config_result","text":"Process and return string of scrapli response(s) Parameters: Name Type Description Default scrapli_response Union [ Response , MultiResponse ] scrapli Response or MultiResponse object required Returns: Name Type Description str str string result from nornir task or None Source code in nornir_scrapli/result.py 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 def process_config_result ( scrapli_response : Union [ Response , MultiResponse ]) -> str : \"\"\" Process and return string of scrapli response(s) Args: scrapli_response: scrapli Response or MultiResponse object Returns: str: string result from nornir task or None Raises: N/A \"\"\" full_results = \"\" if isinstance ( scrapli_response , Response ): for config_input , config_result in zip ( scrapli_response . channel_input . split ( \" \\n \" ), scrapli_response . result . split ( \" \\n \" ) ): if config_input == config_result : full_results += f \" { config_input } \\n \" else : full_results += \" \\n \" . join ([ config_input , config_result ]) else : for response in scrapli_response : full_results += \" \\n \" . join ([ response . channel_input , response . result ]) return full_results","title":"process_config_result()"},{"location":"reference/functions/","text":"nornir_scrapli.functions","title":"functions"},{"location":"reference/functions/print_structured_result/","text":"nornir_scrapli.functions.print_structured_result print_structured_result ( result : AggregatedResult , failed : bool = False , severity_level : int = logging . INFO , parser : str = 'textfsm' , to_dict : bool = True , fail_to_string : bool = False ) -> None \u00b6 Prints the :obj: nornir.core.task.Result from a previous task to screen Parameters: Name Type Description Default result AggregatedResult Nornir AggregateResult object from a previous task required failed bool if True assume the task failed False severity_level int Print only errors with this severity level or higher logging.INFO parser str textfsm|genie -- parser to parse output with 'textfsm' to_dict bool output structured data in dict form instead -- basically put k:v instead of just lists of lists of values for textfsm output; ignored if parser == \"genie\" True fail_to_string bool fallback to printing unstructured output or have tasks skipped (because print_result won't print empty lists which scrapli returns if parsing fails) False Source code in functions/print_structured_result.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 def print_structured_result ( result : AggregatedResult , failed : bool = False , severity_level : int = logging . INFO , parser : str = \"textfsm\" , to_dict : bool = True , fail_to_string : bool = False , ) -> None : \"\"\" Prints the :obj:`nornir.core.task.Result` from a previous task to screen Arguments: result: Nornir AggregateResult object from a previous task failed: if `True` assume the task failed severity_level: Print only errors with this severity level or higher parser: textfsm|genie -- parser to parse output with to_dict: output structured data in dict form instead -- basically put k:v instead of just lists of lists of values for textfsm output; ignored if parser == \"genie\" fail_to_string: fallback to printing unstructured output or have tasks skipped (because print_result won't print empty lists which scrapli returns if parsing fails) \"\"\" updated_agg_result = AggregatedResult ( result . name ) for hostname , multi_result in result . items (): updated_multi_result = MultiResult ( result . name ) for individual_result in multi_result : scrapli_responses = getattr ( individual_result , \"scrapli_response\" , None ) if isinstance ( scrapli_responses , Response ): scrapli_responses = [ scrapli_responses ] if not scrapli_responses : updated_multi_result . append ( individual_result ) continue for scrapli_response in scrapli_responses : parser_method = getattr ( scrapli_response , f \" { parser } _parse_output\" ) updated_result = Result ( host = individual_result . host , changed = individual_result . changed , diff = individual_result . diff , exception = individual_result . exception , failed = individual_result . failed , name = individual_result . name , severity_level = individual_result . severity_level , stderr = individual_result . stderr , stdout = individual_result . stdout , ) if parser == \"textfsm\" : structured_result = parser_method ( to_dict = to_dict ) else : structured_result = parser_method () if not structured_result and fail_to_string : updated_result . result = scrapli_response . result else : updated_result . result = structured_result updated_multi_result . append ( updated_result ) if updated_multi_result : updated_agg_result [ hostname ] = updated_multi_result # noqa LOCK . acquire () # pylint: disable=R1732 try : _print_result ( result = updated_agg_result , attrs = None , failed = failed , severity_level = severity_level ) finally : LOCK . release ()","title":"print_structured_result"},{"location":"reference/functions/print_structured_result/#functions.print_structured_result.print_structured_result","text":"Prints the :obj: nornir.core.task.Result from a previous task to screen Parameters: Name Type Description Default result AggregatedResult Nornir AggregateResult object from a previous task required failed bool if True assume the task failed False severity_level int Print only errors with this severity level or higher logging.INFO parser str textfsm|genie -- parser to parse output with 'textfsm' to_dict bool output structured data in dict form instead -- basically put k:v instead of just lists of lists of values for textfsm output; ignored if parser == \"genie\" True fail_to_string bool fallback to printing unstructured output or have tasks skipped (because print_result won't print empty lists which scrapli returns if parsing fails) False Source code in functions/print_structured_result.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 def print_structured_result ( result : AggregatedResult , failed : bool = False , severity_level : int = logging . INFO , parser : str = \"textfsm\" , to_dict : bool = True , fail_to_string : bool = False , ) -> None : \"\"\" Prints the :obj:`nornir.core.task.Result` from a previous task to screen Arguments: result: Nornir AggregateResult object from a previous task failed: if `True` assume the task failed severity_level: Print only errors with this severity level or higher parser: textfsm|genie -- parser to parse output with to_dict: output structured data in dict form instead -- basically put k:v instead of just lists of lists of values for textfsm output; ignored if parser == \"genie\" fail_to_string: fallback to printing unstructured output or have tasks skipped (because print_result won't print empty lists which scrapli returns if parsing fails) \"\"\" updated_agg_result = AggregatedResult ( result . name ) for hostname , multi_result in result . items (): updated_multi_result = MultiResult ( result . name ) for individual_result in multi_result : scrapli_responses = getattr ( individual_result , \"scrapli_response\" , None ) if isinstance ( scrapli_responses , Response ): scrapli_responses = [ scrapli_responses ] if not scrapli_responses : updated_multi_result . append ( individual_result ) continue for scrapli_response in scrapli_responses : parser_method = getattr ( scrapli_response , f \" { parser } _parse_output\" ) updated_result = Result ( host = individual_result . host , changed = individual_result . changed , diff = individual_result . diff , exception = individual_result . exception , failed = individual_result . failed , name = individual_result . name , severity_level = individual_result . severity_level , stderr = individual_result . stderr , stdout = individual_result . stdout , ) if parser == \"textfsm\" : structured_result = parser_method ( to_dict = to_dict ) else : structured_result = parser_method () if not structured_result and fail_to_string : updated_result . result = scrapli_response . result else : updated_result . result = structured_result updated_multi_result . append ( updated_result ) if updated_multi_result : updated_agg_result [ hostname ] = updated_multi_result # noqa LOCK . acquire () # pylint: disable=R1732 try : _print_result ( result = updated_agg_result , attrs = None , failed = failed , severity_level = severity_level ) finally : LOCK . release ()","title":"print_structured_result()"},{"location":"reference/tasks/","text":"nornir_scrapli.tasks","title":"tasks"},{"location":"reference/tasks/cfg/","text":"nornir_scrapli.tasks.cfg","title":"cfg"},{"location":"reference/tasks/cfg/abort_config/","text":"nornir_scrapli.tasks.cfg_abort_config cfg_abort_config ( task : Task ) -> Result \u00b6 Abort a device candidate config with scrapli-cfg Parameters: Name Type Description Default task Task nornir task object required Returns: Name Type Description Result Result nornir result object with Result.result value set the string result of the load_config operation Source code in tasks/cfg/abort_config.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def cfg_abort_config ( task : Task ) -> Result : \"\"\" Abort a device candidate config with scrapli-cfg Args: task: nornir task object Returns: Result: nornir result object with Result.result value set the string result of the load_config operation Raises: N/A \"\"\" scrapli_cfg_conn = ScrapliConfig . get_connection ( task = task ) scrapli_response = scrapli_cfg_conn . abort_config () result = ScrapliResult ( host = task . host , result = scrapli_response . result , scrapli_response = scrapli_response , changed = False , ) return result","title":"abort_config"},{"location":"reference/tasks/cfg/abort_config/#tasks.cfg.abort_config.cfg_abort_config","text":"Abort a device candidate config with scrapli-cfg Parameters: Name Type Description Default task Task nornir task object required Returns: Name Type Description Result Result nornir result object with Result.result value set the string result of the load_config operation Source code in tasks/cfg/abort_config.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def cfg_abort_config ( task : Task ) -> Result : \"\"\" Abort a device candidate config with scrapli-cfg Args: task: nornir task object Returns: Result: nornir result object with Result.result value set the string result of the load_config operation Raises: N/A \"\"\" scrapli_cfg_conn = ScrapliConfig . get_connection ( task = task ) scrapli_response = scrapli_cfg_conn . abort_config () result = ScrapliResult ( host = task . host , result = scrapli_response . result , scrapli_response = scrapli_response , changed = False , ) return result","title":"cfg_abort_config()"},{"location":"reference/tasks/cfg/commit_config/","text":"nornir_scrapli.tasks.cfg_commit_config cfg_commit_config ( task : Task , source : str = 'running' ) -> Result \u00b6 Commit a device candidate config with scrapli-cfg Parameters: Name Type Description Default task Task nornir task object required source str name of the config source to commit against, generally running|startup 'running' Returns: Name Type Description Result Result nornir result object with Result.result value set the string result of the load_config operation Source code in tasks/cfg/commit_config.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def cfg_commit_config ( task : Task , source : str = \"running\" ) -> Result : \"\"\" Commit a device candidate config with scrapli-cfg Args: task: nornir task object source: name of the config source to commit against, generally running|startup Returns: Result: nornir result object with Result.result value set the string result of the load_config operation Raises: N/A \"\"\" scrapli_cfg_conn = ScrapliConfig . get_connection ( task = task ) scrapli_response = scrapli_cfg_conn . commit_config ( source = source ) result = ScrapliResult ( host = task . host , result = scrapli_response . result , scrapli_response = scrapli_response , changed = True , ) return result","title":"commit_config"},{"location":"reference/tasks/cfg/commit_config/#tasks.cfg.commit_config.cfg_commit_config","text":"Commit a device candidate config with scrapli-cfg Parameters: Name Type Description Default task Task nornir task object required source str name of the config source to commit against, generally running|startup 'running' Returns: Name Type Description Result Result nornir result object with Result.result value set the string result of the load_config operation Source code in tasks/cfg/commit_config.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def cfg_commit_config ( task : Task , source : str = \"running\" ) -> Result : \"\"\" Commit a device candidate config with scrapli-cfg Args: task: nornir task object source: name of the config source to commit against, generally running|startup Returns: Result: nornir result object with Result.result value set the string result of the load_config operation Raises: N/A \"\"\" scrapli_cfg_conn = ScrapliConfig . get_connection ( task = task ) scrapli_response = scrapli_cfg_conn . commit_config ( source = source ) result = ScrapliResult ( host = task . host , result = scrapli_response . result , scrapli_response = scrapli_response , changed = True , ) return result","title":"cfg_commit_config()"},{"location":"reference/tasks/cfg/diff_config/","text":"nornir_scrapli.tasks.cfg_diff_config cfg_diff_config ( task : Task , source : str = 'running' ) -> Result \u00b6 Diff a device candidate config vs a source config with scrapli-cfg The \"device diff\" is stored as the result. You can access the side by side or unified scrapli cfg diffs via the \"scrapli_response\" object stored in the result! Parameters: Name Type Description Default task Task nornir task object required source str name of the config source to commit against, generally running|startup 'running' Returns: Name Type Description Result Result nornir result object with Result.result value set the string result of the load_config operation Source code in tasks/cfg/diff_config.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 def cfg_diff_config ( task : Task , source : str = \"running\" ) -> Result : \"\"\" Diff a device candidate config vs a source config with scrapli-cfg The \"device diff\" is stored as the result. You can access the side by side or unified scrapli cfg diffs via the \"scrapli_response\" object stored in the result! Args: task: nornir task object source: name of the config source to commit against, generally running|startup Returns: Result: nornir result object with Result.result value set the string result of the load_config operation Raises: N/A \"\"\" scrapli_cfg_conn = ScrapliConfig . get_connection ( task = task ) scrapli_response = scrapli_cfg_conn . diff_config ( source = source ) result = ScrapliResult ( host = task . host , result = scrapli_response . device_diff , scrapli_response = scrapli_response , changed = False , ) return result","title":"diff_config"},{"location":"reference/tasks/cfg/diff_config/#tasks.cfg.diff_config.cfg_diff_config","text":"Diff a device candidate config vs a source config with scrapli-cfg The \"device diff\" is stored as the result. You can access the side by side or unified scrapli cfg diffs via the \"scrapli_response\" object stored in the result! Parameters: Name Type Description Default task Task nornir task object required source str name of the config source to commit against, generally running|startup 'running' Returns: Name Type Description Result Result nornir result object with Result.result value set the string result of the load_config operation Source code in tasks/cfg/diff_config.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 def cfg_diff_config ( task : Task , source : str = \"running\" ) -> Result : \"\"\" Diff a device candidate config vs a source config with scrapli-cfg The \"device diff\" is stored as the result. You can access the side by side or unified scrapli cfg diffs via the \"scrapli_response\" object stored in the result! Args: task: nornir task object source: name of the config source to commit against, generally running|startup Returns: Result: nornir result object with Result.result value set the string result of the load_config operation Raises: N/A \"\"\" scrapli_cfg_conn = ScrapliConfig . get_connection ( task = task ) scrapli_response = scrapli_cfg_conn . diff_config ( source = source ) result = ScrapliResult ( host = task . host , result = scrapli_response . device_diff , scrapli_response = scrapli_response , changed = False , ) return result","title":"cfg_diff_config()"},{"location":"reference/tasks/cfg/get_config/","text":"nornir_scrapli.tasks.cfg_get_config cfg_get_config ( task : Task , source : str = 'running' ) -> Result \u00b6 Get device config with scrapli-cfg Parameters: Name Type Description Default task Task nornir task object required source str config source to get 'running' Returns: Name Type Description Result Result nornir result object with Result.result value set to current prompt Source code in tasks/cfg/get_config.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def cfg_get_config ( task : Task , source : str = \"running\" ) -> Result : \"\"\" Get device config with scrapli-cfg Args: task: nornir task object source: config source to get Returns: Result: nornir result object with Result.result value set to current prompt Raises: N/A \"\"\" scrapli_cfg_conn = ScrapliConfig . get_connection ( task = task ) scrapli_response = scrapli_cfg_conn . get_config ( source = source ) result = ScrapliResult ( host = task . host , result = scrapli_response . result , scrapli_response = scrapli_response , changed = False , ) return result","title":"get_config"},{"location":"reference/tasks/cfg/get_config/#tasks.cfg.get_config.cfg_get_config","text":"Get device config with scrapli-cfg Parameters: Name Type Description Default task Task nornir task object required source str config source to get 'running' Returns: Name Type Description Result Result nornir result object with Result.result value set to current prompt Source code in tasks/cfg/get_config.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def cfg_get_config ( task : Task , source : str = \"running\" ) -> Result : \"\"\" Get device config with scrapli-cfg Args: task: nornir task object source: config source to get Returns: Result: nornir result object with Result.result value set to current prompt Raises: N/A \"\"\" scrapli_cfg_conn = ScrapliConfig . get_connection ( task = task ) scrapli_response = scrapli_cfg_conn . get_config ( source = source ) result = ScrapliResult ( host = task . host , result = scrapli_response . result , scrapli_response = scrapli_response , changed = False , ) return result","title":"cfg_get_config()"},{"location":"reference/tasks/cfg/get_version/","text":"nornir_scrapli.tasks.cfg.get_version cfg_get_version ( task : Task ) -> Result \u00b6 Get device version with scrapli-cfg Parameters: Name Type Description Default task Task nornir task object required Returns: Name Type Description Result Result nornir result object with Result.result value set to current version of device Source code in tasks/cfg/get_version.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 def cfg_get_version ( task : Task ) -> Result : \"\"\" Get device version with scrapli-cfg Args: task: nornir task object Returns: Result: nornir result object with Result.result value set to current version of device Raises: N/A \"\"\" scrapli_cfg_conn = ScrapliConfig . get_connection ( task = task ) version = scrapli_cfg_conn . get_version () return Result ( host = task . host , result = version . result , failed = False , changed = False )","title":"get_version"},{"location":"reference/tasks/cfg/get_version/#tasks.cfg.get_version.cfg_get_version","text":"Get device version with scrapli-cfg Parameters: Name Type Description Default task Task nornir task object required Returns: Name Type Description Result Result nornir result object with Result.result value set to current version of device Source code in tasks/cfg/get_version.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 def cfg_get_version ( task : Task ) -> Result : \"\"\" Get device version with scrapli-cfg Args: task: nornir task object Returns: Result: nornir result object with Result.result value set to current version of device Raises: N/A \"\"\" scrapli_cfg_conn = ScrapliConfig . get_connection ( task = task ) version = scrapli_cfg_conn . get_version () return Result ( host = task . host , result = version . result , failed = False , changed = False )","title":"cfg_get_version()"},{"location":"reference/tasks/cfg/load_config/","text":"nornir_scrapli.tasks.cfg_load_config cfg_load_config ( task : Task , config : str , replace : bool = False , ** kwargs : Any ) -> Result \u00b6 Load device config with scrapli-cfg Note that changed will still be False because this is just loading a candidate config! Parameters: Name Type Description Default task Task nornir task object required config str string of the configuration to load required replace bool replace the configuration or not, if false configuration will be loaded as a merge operation False kwargs additional kwargs that the implementing classes may need for their platform, see your specific platform for details required Returns: Name Type Description Result Result nornir result object with Result.result value set the string result of the load_config operation Source code in tasks/cfg/load_config.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 def cfg_load_config ( task : Task , config : str , replace : bool = False , ** kwargs : Any ) -> Result : \"\"\" Load device config with scrapli-cfg Note that `changed` will still be `False` because this is just loading a candidate config! Args: task: nornir task object config: string of the configuration to load replace: replace the configuration or not, if false configuration will be loaded as a merge operation kwargs: additional kwargs that the implementing classes may need for their platform, see your specific platform for details Returns: Result: nornir result object with Result.result value set the string result of the load_config operation Raises: N/A \"\"\" scrapli_cfg_conn = ScrapliConfig . get_connection ( task = task ) scrapli_response = scrapli_cfg_conn . load_config ( config = config , replace = replace , ** kwargs ) result = ScrapliResult ( host = task . host , result = scrapli_response . result , scrapli_response = scrapli_response , changed = False , ) return result","title":"load_config"},{"location":"reference/tasks/cfg/load_config/#tasks.cfg.load_config.cfg_load_config","text":"Load device config with scrapli-cfg Note that changed will still be False because this is just loading a candidate config! Parameters: Name Type Description Default task Task nornir task object required config str string of the configuration to load required replace bool replace the configuration or not, if false configuration will be loaded as a merge operation False kwargs additional kwargs that the implementing classes may need for their platform, see your specific platform for details required Returns: Name Type Description Result Result nornir result object with Result.result value set the string result of the load_config operation Source code in tasks/cfg/load_config.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 def cfg_load_config ( task : Task , config : str , replace : bool = False , ** kwargs : Any ) -> Result : \"\"\" Load device config with scrapli-cfg Note that `changed` will still be `False` because this is just loading a candidate config! Args: task: nornir task object config: string of the configuration to load replace: replace the configuration or not, if false configuration will be loaded as a merge operation kwargs: additional kwargs that the implementing classes may need for their platform, see your specific platform for details Returns: Result: nornir result object with Result.result value set the string result of the load_config operation Raises: N/A \"\"\" scrapli_cfg_conn = ScrapliConfig . get_connection ( task = task ) scrapli_response = scrapli_cfg_conn . load_config ( config = config , replace = replace , ** kwargs ) result = ScrapliResult ( host = task . host , result = scrapli_response . result , scrapli_response = scrapli_response , changed = False , ) return result","title":"cfg_load_config()"},{"location":"reference/tasks/core/","text":"nornir_scrapli.tasks.core","title":"core"},{"location":"reference/tasks/core/get_prompt/","text":"nornir_scrapli.tasks.get_prompt get_prompt ( task : Task ) -> Result \u00b6 Get current prompt from device using scrapli Parameters: Name Type Description Default task Task nornir task object required Returns: Name Type Description Result Result nornir result object with Result.result value set to current prompt Source code in tasks/core/get_prompt.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 def get_prompt ( task : Task ) -> Result : \"\"\" Get current prompt from device using scrapli Args: task: nornir task object Returns: Result: nornir result object with Result.result value set to current prompt Raises: N/A \"\"\" scrapli_conn = task . host . get_connection ( \"scrapli\" , task . nornir . config ) prompt = scrapli_conn . get_prompt () return Result ( host = task . host , result = prompt , failed = False , changed = False )","title":"get_prompt"},{"location":"reference/tasks/core/get_prompt/#tasks.core.get_prompt.get_prompt","text":"Get current prompt from device using scrapli Parameters: Name Type Description Default task Task nornir task object required Returns: Name Type Description Result Result nornir result object with Result.result value set to current prompt Source code in tasks/core/get_prompt.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 def get_prompt ( task : Task ) -> Result : \"\"\" Get current prompt from device using scrapli Args: task: nornir task object Returns: Result: nornir result object with Result.result value set to current prompt Raises: N/A \"\"\" scrapli_conn = task . host . get_connection ( \"scrapli\" , task . nornir . config ) prompt = scrapli_conn . get_prompt () return Result ( host = task . host , result = prompt , failed = False , changed = False )","title":"get_prompt()"},{"location":"reference/tasks/core/send_command/","text":"nornir_scrapli.tasks.send_command send_command ( task : Task , command : str , strip_prompt : bool = True , failed_when_contains : Optional [ Union [ str , List [ str ]]] = None , timeout_ops : Optional [ float ] = None ) -> Result \u00b6 Send a single command to device using scrapli Parameters: Name Type Description Default task Task nornir task object required command str string to send to device in privilege exec mode required strip_prompt bool True/False strip prompt from returned output True failed_when_contains Optional [ Union [ str , List [ str ]]] string or list of strings indicating failure if found in response None timeout_ops Optional [ float ] timeout ops value for this operation; only sets the timeout_ops value for the duration of the operation, value is reset to initial value after operation is completed None Returns: Name Type Description Result Result scrapli nornir result object; almost identical to a \"normal\" nornir result object, but contains an additional attribute \"scrapli_response\" that contains the original response from scrapli Source code in tasks/core/send_command.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 def send_command ( task : Task , command : str , strip_prompt : bool = True , failed_when_contains : Optional [ Union [ str , List [ str ]]] = None , timeout_ops : Optional [ float ] = None , ) -> Result : \"\"\" Send a single command to device using scrapli Args: task: nornir task object command: string to send to device in privilege exec mode strip_prompt: True/False strip prompt from returned output failed_when_contains: string or list of strings indicating failure if found in response timeout_ops: timeout ops value for this operation; only sets the timeout_ops value for the duration of the operation, value is reset to initial value after operation is completed Returns: Result: scrapli nornir result object; almost identical to a \"normal\" nornir result object, but contains an additional attribute \"scrapli_response\" that contains the original response from scrapli Raises: N/A \"\"\" scrapli_conn = task . host . get_connection ( \"scrapli\" , task . nornir . config ) scrapli_response = scrapli_conn . send_command ( command = command , strip_prompt = strip_prompt , failed_when_contains = failed_when_contains , timeout_ops = timeout_ops , ) result = ScrapliResult ( host = task . host , result = process_command_result ( scrapli_response = scrapli_response ), scrapli_response = scrapli_response , changed = False , ) return result","title":"send_command"},{"location":"reference/tasks/core/send_command/#tasks.core.send_command.send_command","text":"Send a single command to device using scrapli Parameters: Name Type Description Default task Task nornir task object required command str string to send to device in privilege exec mode required strip_prompt bool True/False strip prompt from returned output True failed_when_contains Optional [ Union [ str , List [ str ]]] string or list of strings indicating failure if found in response None timeout_ops Optional [ float ] timeout ops value for this operation; only sets the timeout_ops value for the duration of the operation, value is reset to initial value after operation is completed None Returns: Name Type Description Result Result scrapli nornir result object; almost identical to a \"normal\" nornir result object, but contains an additional attribute \"scrapli_response\" that contains the original response from scrapli Source code in tasks/core/send_command.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 def send_command ( task : Task , command : str , strip_prompt : bool = True , failed_when_contains : Optional [ Union [ str , List [ str ]]] = None , timeout_ops : Optional [ float ] = None , ) -> Result : \"\"\" Send a single command to device using scrapli Args: task: nornir task object command: string to send to device in privilege exec mode strip_prompt: True/False strip prompt from returned output failed_when_contains: string or list of strings indicating failure if found in response timeout_ops: timeout ops value for this operation; only sets the timeout_ops value for the duration of the operation, value is reset to initial value after operation is completed Returns: Result: scrapli nornir result object; almost identical to a \"normal\" nornir result object, but contains an additional attribute \"scrapli_response\" that contains the original response from scrapli Raises: N/A \"\"\" scrapli_conn = task . host . get_connection ( \"scrapli\" , task . nornir . config ) scrapli_response = scrapli_conn . send_command ( command = command , strip_prompt = strip_prompt , failed_when_contains = failed_when_contains , timeout_ops = timeout_ops , ) result = ScrapliResult ( host = task . host , result = process_command_result ( scrapli_response = scrapli_response ), scrapli_response = scrapli_response , changed = False , ) return result","title":"send_command()"},{"location":"reference/tasks/core/send_commands/","text":"nornir_scrapli.tasks.send_commands send_commands ( task : Task , commands : List [ str ], strip_prompt : bool = True , failed_when_contains : Optional [ Union [ str , List [ str ]]] = None , stop_on_failed : bool = False , eager : bool = False , timeout_ops : Optional [ float ] = None ) -> Result \u00b6 Send a list of commands to device using scrapli Parameters: Name Type Description Default task Task nornir task object required commands List [ str ] list of strings to send to device in privilege exec mode required strip_prompt bool True/False strip prompt from returned output True failed_when_contains Optional [ Union [ str , List [ str ]]] string or list of strings indicating failure if found in response None stop_on_failed bool True/False stop executing commands if a command fails, returns results as of current execution False eager bool if eager is True we do not read until prompt is seen at each command sent to the channel. Do not use this unless you know what you are doing as it is possible that it can make scrapli less reliable! False timeout_ops Optional [ float ] timeout ops value for this operation; only sets the timeout_ops value for the duration of the operation, value is reset to initial value after operation is completed. Note that this is the timeout value PER COMMAND sent, not for the total of the commands being sent! None Returns: Name Type Description Result Result nornir result object with Result.result value set to returned scrapli Response object Source code in tasks/core/send_commands.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 def send_commands ( task : Task , commands : List [ str ], strip_prompt : bool = True , failed_when_contains : Optional [ Union [ str , List [ str ]]] = None , stop_on_failed : bool = False , eager : bool = False , timeout_ops : Optional [ float ] = None , ) -> Result : \"\"\" Send a list of commands to device using scrapli Args: task: nornir task object commands: list of strings to send to device in privilege exec mode strip_prompt: True/False strip prompt from returned output failed_when_contains: string or list of strings indicating failure if found in response stop_on_failed: True/False stop executing commands if a command fails, returns results as of current execution eager: if eager is True we do not read until prompt is seen at each command sent to the channel. Do *not* use this unless you know what you are doing as it is possible that it can make scrapli less reliable! timeout_ops: timeout ops value for this operation; only sets the timeout_ops value for the duration of the operation, value is reset to initial value after operation is completed. Note that this is the timeout value PER COMMAND sent, not for the total of the commands being sent! Returns: Result: nornir result object with Result.result value set to returned scrapli Response object Raises: N/A \"\"\" scrapli_conn = task . host . get_connection ( \"scrapli\" , task . nornir . config ) scrapli_response = scrapli_conn . send_commands ( commands = commands , strip_prompt = strip_prompt , failed_when_contains = failed_when_contains , stop_on_failed = stop_on_failed , eager = eager , timeout_ops = timeout_ops , ) result = ScrapliResult ( host = task . host , result = process_command_result ( scrapli_response = scrapli_response ), scrapli_response = scrapli_response , changed = False , ) return result","title":"send_commands"},{"location":"reference/tasks/core/send_commands/#tasks.core.send_commands.send_commands","text":"Send a list of commands to device using scrapli Parameters: Name Type Description Default task Task nornir task object required commands List [ str ] list of strings to send to device in privilege exec mode required strip_prompt bool True/False strip prompt from returned output True failed_when_contains Optional [ Union [ str , List [ str ]]] string or list of strings indicating failure if found in response None stop_on_failed bool True/False stop executing commands if a command fails, returns results as of current execution False eager bool if eager is True we do not read until prompt is seen at each command sent to the channel. Do not use this unless you know what you are doing as it is possible that it can make scrapli less reliable! False timeout_ops Optional [ float ] timeout ops value for this operation; only sets the timeout_ops value for the duration of the operation, value is reset to initial value after operation is completed. Note that this is the timeout value PER COMMAND sent, not for the total of the commands being sent! None Returns: Name Type Description Result Result nornir result object with Result.result value set to returned scrapli Response object Source code in tasks/core/send_commands.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 def send_commands ( task : Task , commands : List [ str ], strip_prompt : bool = True , failed_when_contains : Optional [ Union [ str , List [ str ]]] = None , stop_on_failed : bool = False , eager : bool = False , timeout_ops : Optional [ float ] = None , ) -> Result : \"\"\" Send a list of commands to device using scrapli Args: task: nornir task object commands: list of strings to send to device in privilege exec mode strip_prompt: True/False strip prompt from returned output failed_when_contains: string or list of strings indicating failure if found in response stop_on_failed: True/False stop executing commands if a command fails, returns results as of current execution eager: if eager is True we do not read until prompt is seen at each command sent to the channel. Do *not* use this unless you know what you are doing as it is possible that it can make scrapli less reliable! timeout_ops: timeout ops value for this operation; only sets the timeout_ops value for the duration of the operation, value is reset to initial value after operation is completed. Note that this is the timeout value PER COMMAND sent, not for the total of the commands being sent! Returns: Result: nornir result object with Result.result value set to returned scrapli Response object Raises: N/A \"\"\" scrapli_conn = task . host . get_connection ( \"scrapli\" , task . nornir . config ) scrapli_response = scrapli_conn . send_commands ( commands = commands , strip_prompt = strip_prompt , failed_when_contains = failed_when_contains , stop_on_failed = stop_on_failed , eager = eager , timeout_ops = timeout_ops , ) result = ScrapliResult ( host = task . host , result = process_command_result ( scrapli_response = scrapli_response ), scrapli_response = scrapli_response , changed = False , ) return result","title":"send_commands()"},{"location":"reference/tasks/core/send_commands_from_file/","text":"nornir_scrapli.tasks.send_commands send_commands_from_file ( task : Task , file : str , strip_prompt : bool = True , failed_when_contains : Optional [ Union [ str , List [ str ]]] = None , stop_on_failed : bool = False , eager : bool = False , timeout_ops : Optional [ float ] = None ) -> Result \u00b6 Send a list of commands from a file to device using scrapli Parameters: Name Type Description Default task Task nornir task object required file str string path to file required strip_prompt bool True/False strip prompt from returned output True failed_when_contains Optional [ Union [ str , List [ str ]]] string or list of strings indicating failure if found in response None stop_on_failed bool True/False stop executing commands if a command fails, returns results as of current execution False eager bool if eager is True we do not read until prompt is seen at each command sent to the channel. Do not use this unless you know what you are doing as it is possible that it can make scrapli less reliable! False timeout_ops Optional [ float ] timeout ops value for this operation; only sets the timeout_ops value for the duration of the operation, value is reset to initial value after operation is completed None Returns: Name Type Description Result Result nornir result object with Result.result value set to returned scrapli Response object Source code in tasks/core/send_commands_from_file.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 def send_commands_from_file ( task : Task , file : str , strip_prompt : bool = True , failed_when_contains : Optional [ Union [ str , List [ str ]]] = None , stop_on_failed : bool = False , eager : bool = False , timeout_ops : Optional [ float ] = None , ) -> Result : \"\"\" Send a list of commands from a file to device using scrapli Args: task: nornir task object file: string path to file strip_prompt: True/False strip prompt from returned output failed_when_contains: string or list of strings indicating failure if found in response stop_on_failed: True/False stop executing commands if a command fails, returns results as of current execution eager: if eager is True we do not read until prompt is seen at each command sent to the channel. Do *not* use this unless you know what you are doing as it is possible that it can make scrapli less reliable! timeout_ops: timeout ops value for this operation; only sets the timeout_ops value for the duration of the operation, value is reset to initial value after operation is completed Returns: Result: nornir result object with Result.result value set to returned scrapli Response object Raises: N/A \"\"\" scrapli_conn = task . host . get_connection ( \"scrapli\" , task . nornir . config ) scrapli_response = scrapli_conn . send_commands_from_file ( file = file , strip_prompt = strip_prompt , failed_when_contains = failed_when_contains , stop_on_failed = stop_on_failed , eager = eager , timeout_ops = timeout_ops , ) result = ScrapliResult ( host = task . host , result = process_command_result ( scrapli_response = scrapli_response ), scrapli_response = scrapli_response , changed = False , ) return result","title":"send_commands_from_file"},{"location":"reference/tasks/core/send_commands_from_file/#tasks.core.send_commands_from_file.send_commands_from_file","text":"Send a list of commands from a file to device using scrapli Parameters: Name Type Description Default task Task nornir task object required file str string path to file required strip_prompt bool True/False strip prompt from returned output True failed_when_contains Optional [ Union [ str , List [ str ]]] string or list of strings indicating failure if found in response None stop_on_failed bool True/False stop executing commands if a command fails, returns results as of current execution False eager bool if eager is True we do not read until prompt is seen at each command sent to the channel. Do not use this unless you know what you are doing as it is possible that it can make scrapli less reliable! False timeout_ops Optional [ float ] timeout ops value for this operation; only sets the timeout_ops value for the duration of the operation, value is reset to initial value after operation is completed None Returns: Name Type Description Result Result nornir result object with Result.result value set to returned scrapli Response object Source code in tasks/core/send_commands_from_file.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 def send_commands_from_file ( task : Task , file : str , strip_prompt : bool = True , failed_when_contains : Optional [ Union [ str , List [ str ]]] = None , stop_on_failed : bool = False , eager : bool = False , timeout_ops : Optional [ float ] = None , ) -> Result : \"\"\" Send a list of commands from a file to device using scrapli Args: task: nornir task object file: string path to file strip_prompt: True/False strip prompt from returned output failed_when_contains: string or list of strings indicating failure if found in response stop_on_failed: True/False stop executing commands if a command fails, returns results as of current execution eager: if eager is True we do not read until prompt is seen at each command sent to the channel. Do *not* use this unless you know what you are doing as it is possible that it can make scrapli less reliable! timeout_ops: timeout ops value for this operation; only sets the timeout_ops value for the duration of the operation, value is reset to initial value after operation is completed Returns: Result: nornir result object with Result.result value set to returned scrapli Response object Raises: N/A \"\"\" scrapli_conn = task . host . get_connection ( \"scrapli\" , task . nornir . config ) scrapli_response = scrapli_conn . send_commands_from_file ( file = file , strip_prompt = strip_prompt , failed_when_contains = failed_when_contains , stop_on_failed = stop_on_failed , eager = eager , timeout_ops = timeout_ops , ) result = ScrapliResult ( host = task . host , result = process_command_result ( scrapli_response = scrapli_response ), scrapli_response = scrapli_response , changed = False , ) return result","title":"send_commands_from_file()"},{"location":"reference/tasks/core/send_config/","text":"nornir_scrapli.tasks.send_config send_config ( task : Task , config : str , dry_run : Optional [ bool ] = None , strip_prompt : bool = True , failed_when_contains : Optional [ Union [ str , List [ str ]]] = None , stop_on_failed : bool = False , privilege_level : str = '' , eager : bool = False , timeout_ops : Optional [ float ] = None ) -> Result \u00b6 Send a config to device using scrapli Parameters: Name Type Description Default task Task nornir task object required config str string configuration to send to the device, supports sending multi-line strings required dry_run Optional [ bool ] Whether to apply changes or not; if dry run, will ensure that it is possible to enter config mode, but will NOT send any configs None strip_prompt bool True/False strip prompt from returned output True failed_when_contains Optional [ Union [ str , List [ str ]]] string or list of strings indicating failure if found in response None stop_on_failed bool True/False stop executing commands if a command fails, returns results as of current execution False privilege_level str name of configuration privilege level/type to acquire; this is platform dependent, so check the device driver for specifics. Examples of privilege_name would be \"configuration_exclusive\" for IOSXRDriver, or \"configuration_private\" for JunosDriver. You can also pass in a name of a configuration session such as \"my-config-session\" if you have registered a session using the \"register_config_session\" method of the EOSDriver or NXOSDriver. '' eager bool if eager is True we do not read until prompt is seen at each command sent to the channel. Do not use this unless you know what you are doing as it is possible that it can make scrapli less reliable! False timeout_ops Optional [ float ] timeout ops value for this operation; only sets the timeout_ops value for the duration of the operation, value is reset to initial value after operation is completed. Note that this is the timeout value PER CONFIG sent, not for the total of the configs being sent! None Returns: Name Type Description Result Result nornir result object with Result.result value set to returned scrapli Response object Raises: Type Description NornirScrapliNoConfigModeGenericDriver If attempting to use this task function against a host that is using the \"generic\" platform type Source code in tasks/core/send_config.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 def send_config ( task : Task , config : str , dry_run : Optional [ bool ] = None , strip_prompt : bool = True , failed_when_contains : Optional [ Union [ str , List [ str ]]] = None , stop_on_failed : bool = False , privilege_level : str = \"\" , eager : bool = False , timeout_ops : Optional [ float ] = None , ) -> Result : \"\"\" Send a config to device using scrapli Args: task: nornir task object config: string configuration to send to the device, supports sending multi-line strings dry_run: Whether to apply changes or not; if dry run, will ensure that it is possible to enter config mode, but will NOT send any configs strip_prompt: True/False strip prompt from returned output failed_when_contains: string or list of strings indicating failure if found in response stop_on_failed: True/False stop executing commands if a command fails, returns results as of current execution privilege_level: name of configuration privilege level/type to acquire; this is platform dependent, so check the device driver for specifics. Examples of privilege_name would be \"configuration_exclusive\" for IOSXRDriver, or \"configuration_private\" for JunosDriver. You can also pass in a name of a configuration session such as \"my-config-session\" if you have registered a session using the \"register_config_session\" method of the EOSDriver or NXOSDriver. eager: if eager is True we do not read until prompt is seen at each command sent to the channel. Do *not* use this unless you know what you are doing as it is possible that it can make scrapli less reliable! timeout_ops: timeout ops value for this operation; only sets the timeout_ops value for the duration of the operation, value is reset to initial value after operation is completed. Note that this is the timeout value PER CONFIG sent, not for the total of the configs being sent! Returns: Result: nornir result object with Result.result value set to returned scrapli Response object Raises: NornirScrapliNoConfigModeGenericDriver: If attempting to use this task function against a host that is using the \"generic\" platform type \"\"\" if task . host . platform == \"generic\" : raise NornirScrapliNoConfigModeGenericDriver ( \"No config mode for 'generic' platform type\" ) scrapli_conn = task . host . get_connection ( \"scrapli\" , task . nornir . config ) _task_dry_run = dry_run if dry_run is not None else task . global_dry_run if _task_dry_run : # if dry run, try to acquire config mode then back out; do not send any configurations! scrapli_conn . acquire_priv ( \"configuration\" ) scrapli_conn . acquire_priv ( scrapli_conn . default_desired_privilege_level ) return ScrapliResult ( host = task . host , result = None , scrapli_response = None , changed = False ) scrapli_response = scrapli_conn . send_config ( config = config , strip_prompt = strip_prompt , failed_when_contains = failed_when_contains , stop_on_failed = stop_on_failed , privilege_level = privilege_level , eager = eager , timeout_ops = timeout_ops , ) result = ScrapliResult ( host = task . host , result = process_config_result ( scrapli_response = scrapli_response ), scrapli_response = scrapli_response , changed = True , ) return result","title":"send_config"},{"location":"reference/tasks/core/send_config/#tasks.core.send_config.send_config","text":"Send a config to device using scrapli Parameters: Name Type Description Default task Task nornir task object required config str string configuration to send to the device, supports sending multi-line strings required dry_run Optional [ bool ] Whether to apply changes or not; if dry run, will ensure that it is possible to enter config mode, but will NOT send any configs None strip_prompt bool True/False strip prompt from returned output True failed_when_contains Optional [ Union [ str , List [ str ]]] string or list of strings indicating failure if found in response None stop_on_failed bool True/False stop executing commands if a command fails, returns results as of current execution False privilege_level str name of configuration privilege level/type to acquire; this is platform dependent, so check the device driver for specifics. Examples of privilege_name would be \"configuration_exclusive\" for IOSXRDriver, or \"configuration_private\" for JunosDriver. You can also pass in a name of a configuration session such as \"my-config-session\" if you have registered a session using the \"register_config_session\" method of the EOSDriver or NXOSDriver. '' eager bool if eager is True we do not read until prompt is seen at each command sent to the channel. Do not use this unless you know what you are doing as it is possible that it can make scrapli less reliable! False timeout_ops Optional [ float ] timeout ops value for this operation; only sets the timeout_ops value for the duration of the operation, value is reset to initial value after operation is completed. Note that this is the timeout value PER CONFIG sent, not for the total of the configs being sent! None Returns: Name Type Description Result Result nornir result object with Result.result value set to returned scrapli Response object Raises: Type Description NornirScrapliNoConfigModeGenericDriver If attempting to use this task function against a host that is using the \"generic\" platform type Source code in tasks/core/send_config.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 def send_config ( task : Task , config : str , dry_run : Optional [ bool ] = None , strip_prompt : bool = True , failed_when_contains : Optional [ Union [ str , List [ str ]]] = None , stop_on_failed : bool = False , privilege_level : str = \"\" , eager : bool = False , timeout_ops : Optional [ float ] = None , ) -> Result : \"\"\" Send a config to device using scrapli Args: task: nornir task object config: string configuration to send to the device, supports sending multi-line strings dry_run: Whether to apply changes or not; if dry run, will ensure that it is possible to enter config mode, but will NOT send any configs strip_prompt: True/False strip prompt from returned output failed_when_contains: string or list of strings indicating failure if found in response stop_on_failed: True/False stop executing commands if a command fails, returns results as of current execution privilege_level: name of configuration privilege level/type to acquire; this is platform dependent, so check the device driver for specifics. Examples of privilege_name would be \"configuration_exclusive\" for IOSXRDriver, or \"configuration_private\" for JunosDriver. You can also pass in a name of a configuration session such as \"my-config-session\" if you have registered a session using the \"register_config_session\" method of the EOSDriver or NXOSDriver. eager: if eager is True we do not read until prompt is seen at each command sent to the channel. Do *not* use this unless you know what you are doing as it is possible that it can make scrapli less reliable! timeout_ops: timeout ops value for this operation; only sets the timeout_ops value for the duration of the operation, value is reset to initial value after operation is completed. Note that this is the timeout value PER CONFIG sent, not for the total of the configs being sent! Returns: Result: nornir result object with Result.result value set to returned scrapli Response object Raises: NornirScrapliNoConfigModeGenericDriver: If attempting to use this task function against a host that is using the \"generic\" platform type \"\"\" if task . host . platform == \"generic\" : raise NornirScrapliNoConfigModeGenericDriver ( \"No config mode for 'generic' platform type\" ) scrapli_conn = task . host . get_connection ( \"scrapli\" , task . nornir . config ) _task_dry_run = dry_run if dry_run is not None else task . global_dry_run if _task_dry_run : # if dry run, try to acquire config mode then back out; do not send any configurations! scrapli_conn . acquire_priv ( \"configuration\" ) scrapli_conn . acquire_priv ( scrapli_conn . default_desired_privilege_level ) return ScrapliResult ( host = task . host , result = None , scrapli_response = None , changed = False ) scrapli_response = scrapli_conn . send_config ( config = config , strip_prompt = strip_prompt , failed_when_contains = failed_when_contains , stop_on_failed = stop_on_failed , privilege_level = privilege_level , eager = eager , timeout_ops = timeout_ops , ) result = ScrapliResult ( host = task . host , result = process_config_result ( scrapli_response = scrapli_response ), scrapli_response = scrapli_response , changed = True , ) return result","title":"send_config()"},{"location":"reference/tasks/core/send_configs/","text":"nornir_scrapli.tasks.send_configs send_configs ( task : Task , configs : List [ str ], dry_run : Optional [ bool ] = None , strip_prompt : bool = True , failed_when_contains : Optional [ Union [ str , List [ str ]]] = None , stop_on_failed : bool = False , privilege_level : str = '' , eager : bool = False , timeout_ops : Optional [ float ] = None ) -> Result \u00b6 Send configs to device using scrapli Parameters: Name Type Description Default task Task nornir task object required configs List [ str ] list of strings to send to device in config mode required dry_run Optional [ bool ] Whether to apply changes or not; if dry run, will ensure that it is possible to enter config mode, but will NOT send any configs None strip_prompt bool True/False strip prompt from returned output True failed_when_contains Optional [ Union [ str , List [ str ]]] string or list of strings indicating failure if found in response None stop_on_failed bool True/False stop executing commands if a command fails, returns results as of current execution False privilege_level str name of configuration privilege level/type to acquire; this is platform dependent, so check the device driver for specifics. Examples of privilege_name would be \"configuration_exclusive\" for IOSXRDriver, or \"configuration_private\" for JunosDriver. You can also pass in a name of a configuration session such as \"my-config-session\" if you have registered a session using the \"register_config_session\" method of the EOSDriver or NXOSDriver. '' eager bool if eager is True we do not read until prompt is seen at each command sent to the channel. Do not use this unless you know what you are doing as it is possible that it can make scrapli less reliable! False timeout_ops Optional [ float ] timeout ops value for this operation; only sets the timeout_ops value for the duration of the operation, value is reset to initial value after operation is completed. Note that this is the timeout value PER CONFIG sent, not for the total of the configs being sent! None Returns: Name Type Description Result Result nornir result object with Result.result value set to returned scrapli Response object Raises: Type Description NornirScrapliNoConfigModeGenericDriver If attempting to use this task function against a host that is using the \"generic\" platform type Source code in tasks/core/send_configs.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 def send_configs ( task : Task , configs : List [ str ], dry_run : Optional [ bool ] = None , strip_prompt : bool = True , failed_when_contains : Optional [ Union [ str , List [ str ]]] = None , stop_on_failed : bool = False , privilege_level : str = \"\" , eager : bool = False , timeout_ops : Optional [ float ] = None , ) -> Result : \"\"\" Send configs to device using scrapli Args: task: nornir task object configs: list of strings to send to device in config mode dry_run: Whether to apply changes or not; if dry run, will ensure that it is possible to enter config mode, but will NOT send any configs strip_prompt: True/False strip prompt from returned output failed_when_contains: string or list of strings indicating failure if found in response stop_on_failed: True/False stop executing commands if a command fails, returns results as of current execution privilege_level: name of configuration privilege level/type to acquire; this is platform dependent, so check the device driver for specifics. Examples of privilege_name would be \"configuration_exclusive\" for IOSXRDriver, or \"configuration_private\" for JunosDriver. You can also pass in a name of a configuration session such as \"my-config-session\" if you have registered a session using the \"register_config_session\" method of the EOSDriver or NXOSDriver. eager: if eager is True we do not read until prompt is seen at each command sent to the channel. Do *not* use this unless you know what you are doing as it is possible that it can make scrapli less reliable! timeout_ops: timeout ops value for this operation; only sets the timeout_ops value for the duration of the operation, value is reset to initial value after operation is completed. Note that this is the timeout value PER CONFIG sent, not for the total of the configs being sent! Returns: Result: nornir result object with Result.result value set to returned scrapli Response object Raises: NornirScrapliNoConfigModeGenericDriver: If attempting to use this task function against a host that is using the \"generic\" platform type \"\"\" if task . host . platform == \"generic\" : raise NornirScrapliNoConfigModeGenericDriver ( \"No config mode for 'generic' platform type\" ) scrapli_conn = task . host . get_connection ( \"scrapli\" , task . nornir . config ) _task_dry_run = dry_run if dry_run is not None else task . global_dry_run if _task_dry_run : # if dry run, try to acquire config mode then back out; do not send any configurations! scrapli_conn . acquire_priv ( \"configuration\" ) scrapli_conn . acquire_priv ( scrapli_conn . default_desired_privilege_level ) return ScrapliResult ( host = task . host , result = None , scrapli_response = None , changed = False ) scrapli_response = scrapli_conn . send_configs ( configs = configs , strip_prompt = strip_prompt , failed_when_contains = failed_when_contains , stop_on_failed = stop_on_failed , privilege_level = privilege_level , eager = eager , timeout_ops = timeout_ops , ) result = ScrapliResult ( host = task . host , result = process_config_result ( scrapli_response = scrapli_response ), scrapli_response = scrapli_response , changed = True , ) return result","title":"send_configs"},{"location":"reference/tasks/core/send_configs/#tasks.core.send_configs.send_configs","text":"Send configs to device using scrapli Parameters: Name Type Description Default task Task nornir task object required configs List [ str ] list of strings to send to device in config mode required dry_run Optional [ bool ] Whether to apply changes or not; if dry run, will ensure that it is possible to enter config mode, but will NOT send any configs None strip_prompt bool True/False strip prompt from returned output True failed_when_contains Optional [ Union [ str , List [ str ]]] string or list of strings indicating failure if found in response None stop_on_failed bool True/False stop executing commands if a command fails, returns results as of current execution False privilege_level str name of configuration privilege level/type to acquire; this is platform dependent, so check the device driver for specifics. Examples of privilege_name would be \"configuration_exclusive\" for IOSXRDriver, or \"configuration_private\" for JunosDriver. You can also pass in a name of a configuration session such as \"my-config-session\" if you have registered a session using the \"register_config_session\" method of the EOSDriver or NXOSDriver. '' eager bool if eager is True we do not read until prompt is seen at each command sent to the channel. Do not use this unless you know what you are doing as it is possible that it can make scrapli less reliable! False timeout_ops Optional [ float ] timeout ops value for this operation; only sets the timeout_ops value for the duration of the operation, value is reset to initial value after operation is completed. Note that this is the timeout value PER CONFIG sent, not for the total of the configs being sent! None Returns: Name Type Description Result Result nornir result object with Result.result value set to returned scrapli Response object Raises: Type Description NornirScrapliNoConfigModeGenericDriver If attempting to use this task function against a host that is using the \"generic\" platform type Source code in tasks/core/send_configs.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 def send_configs ( task : Task , configs : List [ str ], dry_run : Optional [ bool ] = None , strip_prompt : bool = True , failed_when_contains : Optional [ Union [ str , List [ str ]]] = None , stop_on_failed : bool = False , privilege_level : str = \"\" , eager : bool = False , timeout_ops : Optional [ float ] = None , ) -> Result : \"\"\" Send configs to device using scrapli Args: task: nornir task object configs: list of strings to send to device in config mode dry_run: Whether to apply changes or not; if dry run, will ensure that it is possible to enter config mode, but will NOT send any configs strip_prompt: True/False strip prompt from returned output failed_when_contains: string or list of strings indicating failure if found in response stop_on_failed: True/False stop executing commands if a command fails, returns results as of current execution privilege_level: name of configuration privilege level/type to acquire; this is platform dependent, so check the device driver for specifics. Examples of privilege_name would be \"configuration_exclusive\" for IOSXRDriver, or \"configuration_private\" for JunosDriver. You can also pass in a name of a configuration session such as \"my-config-session\" if you have registered a session using the \"register_config_session\" method of the EOSDriver or NXOSDriver. eager: if eager is True we do not read until prompt is seen at each command sent to the channel. Do *not* use this unless you know what you are doing as it is possible that it can make scrapli less reliable! timeout_ops: timeout ops value for this operation; only sets the timeout_ops value for the duration of the operation, value is reset to initial value after operation is completed. Note that this is the timeout value PER CONFIG sent, not for the total of the configs being sent! Returns: Result: nornir result object with Result.result value set to returned scrapli Response object Raises: NornirScrapliNoConfigModeGenericDriver: If attempting to use this task function against a host that is using the \"generic\" platform type \"\"\" if task . host . platform == \"generic\" : raise NornirScrapliNoConfigModeGenericDriver ( \"No config mode for 'generic' platform type\" ) scrapli_conn = task . host . get_connection ( \"scrapli\" , task . nornir . config ) _task_dry_run = dry_run if dry_run is not None else task . global_dry_run if _task_dry_run : # if dry run, try to acquire config mode then back out; do not send any configurations! scrapli_conn . acquire_priv ( \"configuration\" ) scrapli_conn . acquire_priv ( scrapli_conn . default_desired_privilege_level ) return ScrapliResult ( host = task . host , result = None , scrapli_response = None , changed = False ) scrapli_response = scrapli_conn . send_configs ( configs = configs , strip_prompt = strip_prompt , failed_when_contains = failed_when_contains , stop_on_failed = stop_on_failed , privilege_level = privilege_level , eager = eager , timeout_ops = timeout_ops , ) result = ScrapliResult ( host = task . host , result = process_config_result ( scrapli_response = scrapli_response ), scrapli_response = scrapli_response , changed = True , ) return result","title":"send_configs()"},{"location":"reference/tasks/core/send_configs_from_file/","text":"nornir_scrapli.tasks.send_configs_from_file send_configs_from_file ( task : Task , file : str , dry_run : Optional [ bool ] = None , strip_prompt : bool = True , failed_when_contains : Optional [ Union [ str , List [ str ]]] = None , stop_on_failed : bool = False , privilege_level : str = '' , eager : bool = False , timeout_ops : Optional [ float ] = None ) -> Result \u00b6 Send configs from a file to device using scrapli Parameters: Name Type Description Default task Task nornir task object required file str string path to file required dry_run Optional [ bool ] Whether to apply changes or not; if dry run, will ensure that it is possible to enter config mode, but will NOT send any configs None strip_prompt bool True/False strip prompt from returned output True failed_when_contains Optional [ Union [ str , List [ str ]]] string or list of strings indicating failure if found in response None stop_on_failed bool True/False stop executing commands if a command fails, returns results as of current execution False privilege_level str name of configuration privilege level/type to acquire; this is platform dependent, so check the device driver for specifics. Examples of privilege_name would be \"configuration_exclusive\" for IOSXRDriver, or \"configuration_private\" for JunosDriver. You can also pass in a name of a configuration session such as \"my-config-session\" if you have registered a session using the \"register_config_session\" method of the EOSDriver or NXOSDriver. '' eager bool if eager is True we do not read until prompt is seen at each command sent to the channel. Do not use this unless you know what you are doing as it is possible that it can make scrapli less reliable! False timeout_ops Optional [ float ] timeout ops value for this operation; only sets the timeout_ops value for the duration of the operation, value is reset to initial value after operation is completed. Note that this is the timeout value PER CONFIG sent, not for the total of the configs being sent! None Returns: Name Type Description Result Result nornir result object with Result.result value set to returned scrapli Response object Raises: Type Description NornirScrapliNoConfigModeGenericDriver If attempting to use this task function against a host that is using the \"generic\" platform type Source code in tasks/core/send_configs_from_file.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 def send_configs_from_file ( task : Task , file : str , dry_run : Optional [ bool ] = None , strip_prompt : bool = True , failed_when_contains : Optional [ Union [ str , List [ str ]]] = None , stop_on_failed : bool = False , privilege_level : str = \"\" , eager : bool = False , timeout_ops : Optional [ float ] = None , ) -> Result : \"\"\" Send configs from a file to device using scrapli Args: task: nornir task object file: string path to file dry_run: Whether to apply changes or not; if dry run, will ensure that it is possible to enter config mode, but will NOT send any configs strip_prompt: True/False strip prompt from returned output failed_when_contains: string or list of strings indicating failure if found in response stop_on_failed: True/False stop executing commands if a command fails, returns results as of current execution privilege_level: name of configuration privilege level/type to acquire; this is platform dependent, so check the device driver for specifics. Examples of privilege_name would be \"configuration_exclusive\" for IOSXRDriver, or \"configuration_private\" for JunosDriver. You can also pass in a name of a configuration session such as \"my-config-session\" if you have registered a session using the \"register_config_session\" method of the EOSDriver or NXOSDriver. eager: if eager is True we do not read until prompt is seen at each command sent to the channel. Do *not* use this unless you know what you are doing as it is possible that it can make scrapli less reliable! timeout_ops: timeout ops value for this operation; only sets the timeout_ops value for the duration of the operation, value is reset to initial value after operation is completed. Note that this is the timeout value PER CONFIG sent, not for the total of the configs being sent! Returns: Result: nornir result object with Result.result value set to returned scrapli Response object Raises: NornirScrapliNoConfigModeGenericDriver: If attempting to use this task function against a host that is using the \"generic\" platform type \"\"\" if task . host . platform == \"generic\" : raise NornirScrapliNoConfigModeGenericDriver ( \"No config mode for 'generic' platform type\" ) scrapli_conn = task . host . get_connection ( \"scrapli\" , task . nornir . config ) _task_dry_run = dry_run if dry_run is not None else task . global_dry_run if _task_dry_run : # if dry run, try to acquire config mode then back out; do not send any configurations! scrapli_conn . acquire_priv ( \"configuration\" ) scrapli_conn . acquire_priv ( scrapli_conn . default_desired_privilege_level ) return ScrapliResult ( host = task . host , result = None , scrapli_response = None , changed = False ) scrapli_response = scrapli_conn . send_configs_from_file ( file = file , strip_prompt = strip_prompt , failed_when_contains = failed_when_contains , stop_on_failed = stop_on_failed , privilege_level = privilege_level , eager = eager , timeout_ops = timeout_ops , ) result = ScrapliResult ( host = task . host , result = process_config_result ( scrapli_response = scrapli_response ), scrapli_response = scrapli_response , changed = True , ) return result","title":"send_configs_from_file"},{"location":"reference/tasks/core/send_configs_from_file/#tasks.core.send_configs_from_file.send_configs_from_file","text":"Send configs from a file to device using scrapli Parameters: Name Type Description Default task Task nornir task object required file str string path to file required dry_run Optional [ bool ] Whether to apply changes or not; if dry run, will ensure that it is possible to enter config mode, but will NOT send any configs None strip_prompt bool True/False strip prompt from returned output True failed_when_contains Optional [ Union [ str , List [ str ]]] string or list of strings indicating failure if found in response None stop_on_failed bool True/False stop executing commands if a command fails, returns results as of current execution False privilege_level str name of configuration privilege level/type to acquire; this is platform dependent, so check the device driver for specifics. Examples of privilege_name would be \"configuration_exclusive\" for IOSXRDriver, or \"configuration_private\" for JunosDriver. You can also pass in a name of a configuration session such as \"my-config-session\" if you have registered a session using the \"register_config_session\" method of the EOSDriver or NXOSDriver. '' eager bool if eager is True we do not read until prompt is seen at each command sent to the channel. Do not use this unless you know what you are doing as it is possible that it can make scrapli less reliable! False timeout_ops Optional [ float ] timeout ops value for this operation; only sets the timeout_ops value for the duration of the operation, value is reset to initial value after operation is completed. Note that this is the timeout value PER CONFIG sent, not for the total of the configs being sent! None Returns: Name Type Description Result Result nornir result object with Result.result value set to returned scrapli Response object Raises: Type Description NornirScrapliNoConfigModeGenericDriver If attempting to use this task function against a host that is using the \"generic\" platform type Source code in tasks/core/send_configs_from_file.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 def send_configs_from_file ( task : Task , file : str , dry_run : Optional [ bool ] = None , strip_prompt : bool = True , failed_when_contains : Optional [ Union [ str , List [ str ]]] = None , stop_on_failed : bool = False , privilege_level : str = \"\" , eager : bool = False , timeout_ops : Optional [ float ] = None , ) -> Result : \"\"\" Send configs from a file to device using scrapli Args: task: nornir task object file: string path to file dry_run: Whether to apply changes or not; if dry run, will ensure that it is possible to enter config mode, but will NOT send any configs strip_prompt: True/False strip prompt from returned output failed_when_contains: string or list of strings indicating failure if found in response stop_on_failed: True/False stop executing commands if a command fails, returns results as of current execution privilege_level: name of configuration privilege level/type to acquire; this is platform dependent, so check the device driver for specifics. Examples of privilege_name would be \"configuration_exclusive\" for IOSXRDriver, or \"configuration_private\" for JunosDriver. You can also pass in a name of a configuration session such as \"my-config-session\" if you have registered a session using the \"register_config_session\" method of the EOSDriver or NXOSDriver. eager: if eager is True we do not read until prompt is seen at each command sent to the channel. Do *not* use this unless you know what you are doing as it is possible that it can make scrapli less reliable! timeout_ops: timeout ops value for this operation; only sets the timeout_ops value for the duration of the operation, value is reset to initial value after operation is completed. Note that this is the timeout value PER CONFIG sent, not for the total of the configs being sent! Returns: Result: nornir result object with Result.result value set to returned scrapli Response object Raises: NornirScrapliNoConfigModeGenericDriver: If attempting to use this task function against a host that is using the \"generic\" platform type \"\"\" if task . host . platform == \"generic\" : raise NornirScrapliNoConfigModeGenericDriver ( \"No config mode for 'generic' platform type\" ) scrapli_conn = task . host . get_connection ( \"scrapli\" , task . nornir . config ) _task_dry_run = dry_run if dry_run is not None else task . global_dry_run if _task_dry_run : # if dry run, try to acquire config mode then back out; do not send any configurations! scrapli_conn . acquire_priv ( \"configuration\" ) scrapli_conn . acquire_priv ( scrapli_conn . default_desired_privilege_level ) return ScrapliResult ( host = task . host , result = None , scrapli_response = None , changed = False ) scrapli_response = scrapli_conn . send_configs_from_file ( file = file , strip_prompt = strip_prompt , failed_when_contains = failed_when_contains , stop_on_failed = stop_on_failed , privilege_level = privilege_level , eager = eager , timeout_ops = timeout_ops , ) result = ScrapliResult ( host = task . host , result = process_config_result ( scrapli_response = scrapli_response ), scrapli_response = scrapli_response , changed = True , ) return result","title":"send_configs_from_file()"},{"location":"reference/tasks/core/send_interactive/","text":"nornir_scrapli.tasks.send_interactive send_interactive ( task : Task , interact_events : List [ Tuple [ str , str , Optional [ bool ]]], failed_when_contains : Optional [ Union [ str , List [ str ]]] = None , privilege_level : str = '' , timeout_ops : Optional [ float ] = None ) -> Result \u00b6 Send inputs in an interactive fashion using scrapli; usually used to handle prompts Used to interact with devices where prompts change per input, and where inputs may be hidden such as in the case of a password input. This can be used to respond to challenges from devices such as the confirmation for the command \"clear logging\" on IOSXE devices for example. You may have as many elements in the \"interact_events\" list as needed, and each element of that list should be a tuple of two or three elements. The first element is always the input to send as a string, the second should be the expected response as a string, and the optional third a bool for whether or not the input is \"hidden\" (i.e. password input) An example where we need this sort of capability: 1 2 3 4 5 6 7 8 9 10 11 3560CX#copy flash: scp: Source filename []? test1.txt Address or name of remote host []? 172.31.254.100 Destination username [carl]? Writing test1.txt Password: Password: Sink: C0644 639 test1.txt ! 639 bytes copied in 12.066 secs (53 bytes/sec) 3560CX# To accomplish this we can use the following (in \"native\" scrapli): 1 2 3 4 5 6 7 8 9 interact = conn.channel.send_inputs_interact( [ (\"copy flash: scp:\", \"Source filename []?\", False), (\"test1.txt\", \"Address or name of remote host []?\", False), (\"172.31.254.100\", \"Destination username [carl]?\", False), (\"carl\", \"Password:\", False), (\"super_secure_password\", prompt, True), ] ) If we needed to deal with more prompts we could simply continue adding tuples to the list of interact \"events\". Parameters: Name Type Description Default task Task nornir task object required interact_events List [ Tuple [ str , str , Optional [ bool ]]] list of tuples containing the \"interactions\" with the device each list element must have an input and an expected response, and may have an optional bool for the third and final element -- the optional bool specifies if the input that is sent to the device is \"hidden\" (ex: password), if the hidden param is not provided it is assumed the input is \"normal\" (not hidden) required failed_when_contains Optional [ Union [ str , List [ str ]]] list of strings that, if present in final output, represent a failed command/interaction None privilege_level str name of the privilege level to operate in '' timeout_ops Optional [ float ] timeout ops value for this operation; only sets the timeout_ops value for the duration of the operation, value is reset to initial value after operation is completed None Returns: Name Type Description Result Result nornir result object with Result.result value set to returned scrapli Response object Source code in tasks/core/send_interactive.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 def send_interactive ( task : Task , interact_events : List [ Tuple [ str , str , Optional [ bool ]]], failed_when_contains : Optional [ Union [ str , List [ str ]]] = None , privilege_level : str = \"\" , timeout_ops : Optional [ float ] = None , ) -> Result : \"\"\" Send inputs in an interactive fashion using scrapli; usually used to handle prompts Used to interact with devices where prompts change per input, and where inputs may be hidden such as in the case of a password input. This can be used to respond to challenges from devices such as the confirmation for the command \"clear logging\" on IOSXE devices for example. You may have as many elements in the \"interact_events\" list as needed, and each element of that list should be a tuple of two or three elements. The first element is always the input to send as a string, the second should be the expected response as a string, and the optional third a bool for whether or not the input is \"hidden\" (i.e. password input) An example where we need this sort of capability: ``` 3560CX#copy flash: scp: Source filename []? test1.txt Address or name of remote host []? 172.31.254.100 Destination username [carl]? Writing test1.txt Password: Password: Sink: C0644 639 test1.txt ! 639 bytes copied in 12.066 secs (53 bytes/sec) 3560CX# ``` To accomplish this we can use the following (in \"native\" scrapli): ``` interact = conn.channel.send_inputs_interact( [ (\"copy flash: scp:\", \"Source filename []?\", False), (\"test1.txt\", \"Address or name of remote host []?\", False), (\"172.31.254.100\", \"Destination username [carl]?\", False), (\"carl\", \"Password:\", False), (\"super_secure_password\", prompt, True), ] ) ``` If we needed to deal with more prompts we could simply continue adding tuples to the list of interact \"events\". Args: task: nornir task object interact_events: list of tuples containing the \"interactions\" with the device each list element must have an input and an expected response, and may have an optional bool for the third and final element -- the optional bool specifies if the input that is sent to the device is \"hidden\" (ex: password), if the hidden param is not provided it is assumed the input is \"normal\" (not hidden) failed_when_contains: list of strings that, if present in final output, represent a failed command/interaction privilege_level: name of the privilege level to operate in timeout_ops: timeout ops value for this operation; only sets the timeout_ops value for the duration of the operation, value is reset to initial value after operation is completed Returns: Result: nornir result object with Result.result value set to returned scrapli Response object Raises: N/A \"\"\" scrapli_conn = task . host . get_connection ( \"scrapli\" , task . nornir . config ) scrapli_response = scrapli_conn . send_interactive ( interact_events = interact_events , failed_when_contains = failed_when_contains , privilege_level = privilege_level , timeout_ops = timeout_ops , ) result = Result ( host = task . host , result = scrapli_response , failed = scrapli_response . failed , changed = True , ) setattr ( result , \"scrapli_response\" , scrapli_response ) return result","title":"send_interactive"},{"location":"reference/tasks/core/send_interactive/#tasks.core.send_interactive.send_interactive","text":"Send inputs in an interactive fashion using scrapli; usually used to handle prompts Used to interact with devices where prompts change per input, and where inputs may be hidden such as in the case of a password input. This can be used to respond to challenges from devices such as the confirmation for the command \"clear logging\" on IOSXE devices for example. You may have as many elements in the \"interact_events\" list as needed, and each element of that list should be a tuple of two or three elements. The first element is always the input to send as a string, the second should be the expected response as a string, and the optional third a bool for whether or not the input is \"hidden\" (i.e. password input) An example where we need this sort of capability: 1 2 3 4 5 6 7 8 9 10 11 3560CX#copy flash: scp: Source filename []? test1.txt Address or name of remote host []? 172.31.254.100 Destination username [carl]? Writing test1.txt Password: Password: Sink: C0644 639 test1.txt ! 639 bytes copied in 12.066 secs (53 bytes/sec) 3560CX# To accomplish this we can use the following (in \"native\" scrapli): 1 2 3 4 5 6 7 8 9 interact = conn.channel.send_inputs_interact( [ (\"copy flash: scp:\", \"Source filename []?\", False), (\"test1.txt\", \"Address or name of remote host []?\", False), (\"172.31.254.100\", \"Destination username [carl]?\", False), (\"carl\", \"Password:\", False), (\"super_secure_password\", prompt, True), ] ) If we needed to deal with more prompts we could simply continue adding tuples to the list of interact \"events\". Parameters: Name Type Description Default task Task nornir task object required interact_events List [ Tuple [ str , str , Optional [ bool ]]] list of tuples containing the \"interactions\" with the device each list element must have an input and an expected response, and may have an optional bool for the third and final element -- the optional bool specifies if the input that is sent to the device is \"hidden\" (ex: password), if the hidden param is not provided it is assumed the input is \"normal\" (not hidden) required failed_when_contains Optional [ Union [ str , List [ str ]]] list of strings that, if present in final output, represent a failed command/interaction None privilege_level str name of the privilege level to operate in '' timeout_ops Optional [ float ] timeout ops value for this operation; only sets the timeout_ops value for the duration of the operation, value is reset to initial value after operation is completed None Returns: Name Type Description Result Result nornir result object with Result.result value set to returned scrapli Response object Source code in tasks/core/send_interactive.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 def send_interactive ( task : Task , interact_events : List [ Tuple [ str , str , Optional [ bool ]]], failed_when_contains : Optional [ Union [ str , List [ str ]]] = None , privilege_level : str = \"\" , timeout_ops : Optional [ float ] = None , ) -> Result : \"\"\" Send inputs in an interactive fashion using scrapli; usually used to handle prompts Used to interact with devices where prompts change per input, and where inputs may be hidden such as in the case of a password input. This can be used to respond to challenges from devices such as the confirmation for the command \"clear logging\" on IOSXE devices for example. You may have as many elements in the \"interact_events\" list as needed, and each element of that list should be a tuple of two or three elements. The first element is always the input to send as a string, the second should be the expected response as a string, and the optional third a bool for whether or not the input is \"hidden\" (i.e. password input) An example where we need this sort of capability: ``` 3560CX#copy flash: scp: Source filename []? test1.txt Address or name of remote host []? 172.31.254.100 Destination username [carl]? Writing test1.txt Password: Password: Sink: C0644 639 test1.txt ! 639 bytes copied in 12.066 secs (53 bytes/sec) 3560CX# ``` To accomplish this we can use the following (in \"native\" scrapli): ``` interact = conn.channel.send_inputs_interact( [ (\"copy flash: scp:\", \"Source filename []?\", False), (\"test1.txt\", \"Address or name of remote host []?\", False), (\"172.31.254.100\", \"Destination username [carl]?\", False), (\"carl\", \"Password:\", False), (\"super_secure_password\", prompt, True), ] ) ``` If we needed to deal with more prompts we could simply continue adding tuples to the list of interact \"events\". Args: task: nornir task object interact_events: list of tuples containing the \"interactions\" with the device each list element must have an input and an expected response, and may have an optional bool for the third and final element -- the optional bool specifies if the input that is sent to the device is \"hidden\" (ex: password), if the hidden param is not provided it is assumed the input is \"normal\" (not hidden) failed_when_contains: list of strings that, if present in final output, represent a failed command/interaction privilege_level: name of the privilege level to operate in timeout_ops: timeout ops value for this operation; only sets the timeout_ops value for the duration of the operation, value is reset to initial value after operation is completed Returns: Result: nornir result object with Result.result value set to returned scrapli Response object Raises: N/A \"\"\" scrapli_conn = task . host . get_connection ( \"scrapli\" , task . nornir . config ) scrapli_response = scrapli_conn . send_interactive ( interact_events = interact_events , failed_when_contains = failed_when_contains , privilege_level = privilege_level , timeout_ops = timeout_ops , ) result = Result ( host = task . host , result = scrapli_response , failed = scrapli_response . failed , changed = True , ) setattr ( result , \"scrapli_response\" , scrapli_response ) return result","title":"send_interactive()"},{"location":"reference/tasks/netconf/","text":"nornir_scrapli.tasks.netconf","title":"netconf"},{"location":"reference/tasks/netconf/capabilities/","text":"nornir_scrapli.tasks.netconf_capabilities netconf_capabilities ( task : Task ) -> Result \u00b6 Retrieve the device config with scrapli_netconf Parameters: Name Type Description Default task Task nornir task object required Returns: Name Type Description Result Result nornir result object with Result.result value set to a list of strings representing the device capabilities Source code in tasks/netconf/capabilities.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 def netconf_capabilities ( task : Task , ) -> Result : \"\"\" Retrieve the device config with scrapli_netconf Args: task: nornir task object Returns: Result: nornir result object with Result.result value set to a list of strings representing the device capabilities Raises: N/A \"\"\" scrapli_conn = task . host . get_connection ( \"scrapli_netconf\" , task . nornir . config ) result = Result ( host = task . host , result = scrapli_conn . server_capabilities , failed = False , changed = False , ) return result","title":"capabilities"},{"location":"reference/tasks/netconf/capabilities/#tasks.netconf.capabilities.netconf_capabilities","text":"Retrieve the device config with scrapli_netconf Parameters: Name Type Description Default task Task nornir task object required Returns: Name Type Description Result Result nornir result object with Result.result value set to a list of strings representing the device capabilities Source code in tasks/netconf/capabilities.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 def netconf_capabilities ( task : Task , ) -> Result : \"\"\" Retrieve the device config with scrapli_netconf Args: task: nornir task object Returns: Result: nornir result object with Result.result value set to a list of strings representing the device capabilities Raises: N/A \"\"\" scrapli_conn = task . host . get_connection ( \"scrapli_netconf\" , task . nornir . config ) result = Result ( host = task . host , result = scrapli_conn . server_capabilities , failed = False , changed = False , ) return result","title":"netconf_capabilities()"},{"location":"reference/tasks/netconf/commit/","text":"nornir_scrapli.tasks.netconf_commit netconf_commit ( task : Task ) -> Result \u00b6 Commit the device config with scrapli_netconf Parameters: Name Type Description Default task Task nornir task object required Returns: Name Type Description Result Result nornir result object with Result.result value set the string result of the get operation Source code in tasks/netconf/commit.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 def netconf_commit ( task : Task , ) -> Result : \"\"\" Commit the device config with scrapli_netconf Args: task: nornir task object Returns: Result: nornir result object with Result.result value set the string result of the get operation Raises: N/A \"\"\" scrapli_conn = task . host . get_connection ( \"scrapli_netconf\" , task . nornir . config ) scrapli_response = scrapli_conn . commit () result = ScrapliResult ( host = task . host , result = process_command_result ( scrapli_response = scrapli_response ), scrapli_response = scrapli_response , changed = True , ) return result","title":"commit"},{"location":"reference/tasks/netconf/commit/#tasks.netconf.commit.netconf_commit","text":"Commit the device config with scrapli_netconf Parameters: Name Type Description Default task Task nornir task object required Returns: Name Type Description Result Result nornir result object with Result.result value set the string result of the get operation Source code in tasks/netconf/commit.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 def netconf_commit ( task : Task , ) -> Result : \"\"\" Commit the device config with scrapli_netconf Args: task: nornir task object Returns: Result: nornir result object with Result.result value set the string result of the get operation Raises: N/A \"\"\" scrapli_conn = task . host . get_connection ( \"scrapli_netconf\" , task . nornir . config ) scrapli_response = scrapli_conn . commit () result = ScrapliResult ( host = task . host , result = process_command_result ( scrapli_response = scrapli_response ), scrapli_response = scrapli_response , changed = True , ) return result","title":"netconf_commit()"},{"location":"reference/tasks/netconf/delete_config/","text":"nornir_scrapli.tasks.netconf_delete_config netconf_delete_config ( task : Task , target : str = 'candidate' ) -> Result \u00b6 Send a \"delete-config\" rcp to the device with scrapli_netconf Parameters: Name Type Description Default task Task nornir task object required target str configuration source to target; startup|candidate 'candidate' Returns: Name Type Description Result Result nornir result object with Result.result value set the string result of the delete operation Source code in tasks/netconf/delete_config.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def netconf_delete_config ( task : Task , target : str = \"candidate\" , ) -> Result : \"\"\" Send a \"delete-config\" rcp to the device with scrapli_netconf Args: task: nornir task object target: configuration source to target; startup|candidate Returns: Result: nornir result object with Result.result value set the string result of the delete operation Raises: N/A \"\"\" scrapli_conn = task . host . get_connection ( \"scrapli_netconf\" , task . nornir . config ) scrapli_response = scrapli_conn . delete_config ( target = target ) result = ScrapliResult ( host = task . host , result = process_command_result ( scrapli_response = scrapli_response ), scrapli_response = scrapli_response , changed = True , ) return result","title":"delete_config"},{"location":"reference/tasks/netconf/delete_config/#tasks.netconf.delete_config.netconf_delete_config","text":"Send a \"delete-config\" rcp to the device with scrapli_netconf Parameters: Name Type Description Default task Task nornir task object required target str configuration source to target; startup|candidate 'candidate' Returns: Name Type Description Result Result nornir result object with Result.result value set the string result of the delete operation Source code in tasks/netconf/delete_config.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def netconf_delete_config ( task : Task , target : str = \"candidate\" , ) -> Result : \"\"\" Send a \"delete-config\" rcp to the device with scrapli_netconf Args: task: nornir task object target: configuration source to target; startup|candidate Returns: Result: nornir result object with Result.result value set the string result of the delete operation Raises: N/A \"\"\" scrapli_conn = task . host . get_connection ( \"scrapli_netconf\" , task . nornir . config ) scrapli_response = scrapli_conn . delete_config ( target = target ) result = ScrapliResult ( host = task . host , result = process_command_result ( scrapli_response = scrapli_response ), scrapli_response = scrapli_response , changed = True , ) return result","title":"netconf_delete_config()"},{"location":"reference/tasks/netconf/discard/","text":"nornir_scrapli.tasks.netconf_discard netconf_discard ( task : Task ) -> Result \u00b6 Discard the device config with scrapli_netconf Parameters: Name Type Description Default task Task nornir task object required Returns: Name Type Description Result Result nornir result object with Result.result value set the string result of the get operation Source code in tasks/netconf/discard.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 def netconf_discard ( task : Task , ) -> Result : \"\"\" Discard the device config with scrapli_netconf Args: task: nornir task object Returns: Result: nornir result object with Result.result value set the string result of the get operation Raises: N/A \"\"\" scrapli_conn = task . host . get_connection ( \"scrapli_netconf\" , task . nornir . config ) scrapli_response = scrapli_conn . discard () result = ScrapliResult ( host = task . host , result = process_command_result ( scrapli_response = scrapli_response ), scrapli_response = scrapli_response , changed = True , ) return result","title":"discard"},{"location":"reference/tasks/netconf/discard/#tasks.netconf.discard.netconf_discard","text":"Discard the device config with scrapli_netconf Parameters: Name Type Description Default task Task nornir task object required Returns: Name Type Description Result Result nornir result object with Result.result value set the string result of the get operation Source code in tasks/netconf/discard.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 def netconf_discard ( task : Task , ) -> Result : \"\"\" Discard the device config with scrapli_netconf Args: task: nornir task object Returns: Result: nornir result object with Result.result value set the string result of the get operation Raises: N/A \"\"\" scrapli_conn = task . host . get_connection ( \"scrapli_netconf\" , task . nornir . config ) scrapli_response = scrapli_conn . discard () result = ScrapliResult ( host = task . host , result = process_command_result ( scrapli_response = scrapli_response ), scrapli_response = scrapli_response , changed = True , ) return result","title":"netconf_discard()"},{"location":"reference/tasks/netconf/edit_config/","text":"nornir_scrapli.tasks.netconf_edit_config netconf_edit_config ( task : Task , config : str , dry_run : Optional [ bool ] = None , diff : bool = False , target : str = 'running' ) -> Result \u00b6 Edit config from the device with scrapli_netconf Parameters: Name Type Description Default task Task nornir task object required config str configuration to send to device required dry_run Optional [ bool ] if True config will be pushed and then discarded; will discard anything already pushed that has not been committed already, so be careful! :D; also note that this will only work if there is a candidate datastore -- meaning that, for example, with IOSXE with a target of \"running\" there is no way to discard the configuration as it will already have been written to the running datastore None diff bool capture/set diff of target datastore xml text of before/after edit config operation False target str configuration source to target; running|startup|candidate 'running' Returns: Name Type Description Result Result nornir result object with Result.result value set the string result of the get_config operation Source code in tasks/netconf/edit_config.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 def netconf_edit_config ( task : Task , config : str , dry_run : Optional [ bool ] = None , diff : bool = False , target : str = \"running\" , ) -> Result : \"\"\" Edit config from the device with scrapli_netconf Args: task: nornir task object config: configuration to send to device dry_run: if True config will be pushed and then discarded; will discard anything already pushed that has *not* been committed already, so be careful! :D; also note that this will only work if there is a candidate datastore -- meaning that, for example, with IOSXE with a target of \"running\" there is no way to discard the configuration as it will already have been written to the running datastore diff: capture/set diff of target datastore xml text of before/after edit config operation target: configuration source to target; running|startup|candidate Returns: Result: nornir result object with Result.result value set the string result of the get_config operation Raises: N/A \"\"\" scrapli_conn = task . host . get_connection ( \"scrapli_netconf\" , task . nornir . config ) if diff : original_config = scrapli_conn . get_config ( source = target ) scrapli_response = scrapli_conn . edit_config ( config = config , target = target ) if diff : edited_config = scrapli_conn . get_config ( source = target ) diff_result = diff_xml_text ( original_config . result , edited_config . result ) else : diff_result = \"\" _task_dry_run = dry_run if dry_run is not None else task . global_dry_run if _task_dry_run : scrapli_conn . discard () changed = False else : changed = True result = ScrapliResult ( host = task . host , result = process_command_result ( scrapli_response = scrapli_response ), scrapli_response = scrapli_response , changed = changed , diff = diff_result , ) return result","title":"edit_config"},{"location":"reference/tasks/netconf/edit_config/#tasks.netconf.edit_config.netconf_edit_config","text":"Edit config from the device with scrapli_netconf Parameters: Name Type Description Default task Task nornir task object required config str configuration to send to device required dry_run Optional [ bool ] if True config will be pushed and then discarded; will discard anything already pushed that has not been committed already, so be careful! :D; also note that this will only work if there is a candidate datastore -- meaning that, for example, with IOSXE with a target of \"running\" there is no way to discard the configuration as it will already have been written to the running datastore None diff bool capture/set diff of target datastore xml text of before/after edit config operation False target str configuration source to target; running|startup|candidate 'running' Returns: Name Type Description Result Result nornir result object with Result.result value set the string result of the get_config operation Source code in tasks/netconf/edit_config.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 def netconf_edit_config ( task : Task , config : str , dry_run : Optional [ bool ] = None , diff : bool = False , target : str = \"running\" , ) -> Result : \"\"\" Edit config from the device with scrapli_netconf Args: task: nornir task object config: configuration to send to device dry_run: if True config will be pushed and then discarded; will discard anything already pushed that has *not* been committed already, so be careful! :D; also note that this will only work if there is a candidate datastore -- meaning that, for example, with IOSXE with a target of \"running\" there is no way to discard the configuration as it will already have been written to the running datastore diff: capture/set diff of target datastore xml text of before/after edit config operation target: configuration source to target; running|startup|candidate Returns: Result: nornir result object with Result.result value set the string result of the get_config operation Raises: N/A \"\"\" scrapli_conn = task . host . get_connection ( \"scrapli_netconf\" , task . nornir . config ) if diff : original_config = scrapli_conn . get_config ( source = target ) scrapli_response = scrapli_conn . edit_config ( config = config , target = target ) if diff : edited_config = scrapli_conn . get_config ( source = target ) diff_result = diff_xml_text ( original_config . result , edited_config . result ) else : diff_result = \"\" _task_dry_run = dry_run if dry_run is not None else task . global_dry_run if _task_dry_run : scrapli_conn . discard () changed = False else : changed = True result = ScrapliResult ( host = task . host , result = process_command_result ( scrapli_response = scrapli_response ), scrapli_response = scrapli_response , changed = changed , diff = diff_result , ) return result","title":"netconf_edit_config()"},{"location":"reference/tasks/netconf/get/","text":"nornir_scrapli.tasks.netconf_get netconf_get ( task : Task , filter_ : str , filter_type : str = 'subtree' ) -> Result \u00b6 Get from the device with scrapli_netconf Parameters: Name Type Description Default task Task nornir task object required filter_ str string filter to apply to the get required filter_type str type of filter; subtree|xpath 'subtree' Returns: Name Type Description Result Result nornir result object with Result.result value set the string result of the get operation Source code in tasks/netconf/get.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 def netconf_get ( task : Task , filter_ : str , filter_type : str = \"subtree\" , ) -> Result : \"\"\" Get from the device with scrapli_netconf Args: task: nornir task object filter_: string filter to apply to the get filter_type: type of filter; subtree|xpath Returns: Result: nornir result object with Result.result value set the string result of the get operation Raises: N/A \"\"\" scrapli_conn = task . host . get_connection ( \"scrapli_netconf\" , task . nornir . config ) scrapli_response = scrapli_conn . get ( filter_ = filter_ , filter_type = filter_type ) result = ScrapliResult ( host = task . host , result = process_command_result ( scrapli_response = scrapli_response ), scrapli_response = scrapli_response , changed = False , ) return result","title":"get"},{"location":"reference/tasks/netconf/get/#tasks.netconf.get.netconf_get","text":"Get from the device with scrapli_netconf Parameters: Name Type Description Default task Task nornir task object required filter_ str string filter to apply to the get required filter_type str type of filter; subtree|xpath 'subtree' Returns: Name Type Description Result Result nornir result object with Result.result value set the string result of the get operation Source code in tasks/netconf/get.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 def netconf_get ( task : Task , filter_ : str , filter_type : str = \"subtree\" , ) -> Result : \"\"\" Get from the device with scrapli_netconf Args: task: nornir task object filter_: string filter to apply to the get filter_type: type of filter; subtree|xpath Returns: Result: nornir result object with Result.result value set the string result of the get operation Raises: N/A \"\"\" scrapli_conn = task . host . get_connection ( \"scrapli_netconf\" , task . nornir . config ) scrapli_response = scrapli_conn . get ( filter_ = filter_ , filter_type = filter_type ) result = ScrapliResult ( host = task . host , result = process_command_result ( scrapli_response = scrapli_response ), scrapli_response = scrapli_response , changed = False , ) return result","title":"netconf_get()"},{"location":"reference/tasks/netconf/get_config/","text":"nornir_scrapli.tasks.netconf_get_config netconf_get_config ( task : Task , source : str = 'running' , filter_ : Optional [ Union [ str , List [ str ]]] = None , filter_type : str = 'subtree' ) -> Result \u00b6 Get config from the device with scrapli_netconf Parameters: Name Type Description Default task Task nornir task object required source str configuration source to get; typically one of running|startup|candidate 'running' filter_ Optional [ Union [ str , List [ str ]]] string of filter(s) to apply to configuration None filter_type str type of filter; subtree|xpath 'subtree' Returns: Name Type Description Result Result nornir result object with Result.result value set the string result of the get_config operation Source code in tasks/netconf/get_config.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 def netconf_get_config ( task : Task , source : str = \"running\" , filter_ : Optional [ Union [ str , List [ str ]]] = None , filter_type : str = \"subtree\" , ) -> Result : \"\"\" Get config from the device with scrapli_netconf Args: task: nornir task object source: configuration source to get; typically one of running|startup|candidate filter_: string of filter(s) to apply to configuration filter_type: type of filter; subtree|xpath Returns: Result: nornir result object with Result.result value set the string result of the get_config operation Raises: N/A \"\"\" scrapli_conn = task . host . get_connection ( \"scrapli_netconf\" , task . nornir . config ) scrapli_response = scrapli_conn . get_config ( source = source , filter_ = filter_ , filter_type = filter_type ) result = ScrapliResult ( host = task . host , result = process_command_result ( scrapli_response = scrapli_response ), scrapli_response = scrapli_response , changed = False , ) return result","title":"get_config"},{"location":"reference/tasks/netconf/get_config/#tasks.netconf.get_config.netconf_get_config","text":"Get config from the device with scrapli_netconf Parameters: Name Type Description Default task Task nornir task object required source str configuration source to get; typically one of running|startup|candidate 'running' filter_ Optional [ Union [ str , List [ str ]]] string of filter(s) to apply to configuration None filter_type str type of filter; subtree|xpath 'subtree' Returns: Name Type Description Result Result nornir result object with Result.result value set the string result of the get_config operation Source code in tasks/netconf/get_config.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 def netconf_get_config ( task : Task , source : str = \"running\" , filter_ : Optional [ Union [ str , List [ str ]]] = None , filter_type : str = \"subtree\" , ) -> Result : \"\"\" Get config from the device with scrapli_netconf Args: task: nornir task object source: configuration source to get; typically one of running|startup|candidate filter_: string of filter(s) to apply to configuration filter_type: type of filter; subtree|xpath Returns: Result: nornir result object with Result.result value set the string result of the get_config operation Raises: N/A \"\"\" scrapli_conn = task . host . get_connection ( \"scrapli_netconf\" , task . nornir . config ) scrapli_response = scrapli_conn . get_config ( source = source , filter_ = filter_ , filter_type = filter_type ) result = ScrapliResult ( host = task . host , result = process_command_result ( scrapli_response = scrapli_response ), scrapli_response = scrapli_response , changed = False , ) return result","title":"netconf_get_config()"},{"location":"reference/tasks/netconf/lock/","text":"nornir_scrapli.tasks.netconf_lock netconf_lock ( task : Task , target : str ) -> Result \u00b6 Lock the device with scrapli_netconf Parameters: Name Type Description Default task Task nornir task object required target str configuration source to target; running|startup|candidate required Returns: Name Type Description Result Result nornir result object with Result.result value set the string result of the get operation Source code in tasks/netconf/lock.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def netconf_lock ( task : Task , target : str , ) -> Result : \"\"\" Lock the device with scrapli_netconf Args: task: nornir task object target: configuration source to target; running|startup|candidate Returns: Result: nornir result object with Result.result value set the string result of the get operation Raises: N/A \"\"\" scrapli_conn = task . host . get_connection ( \"scrapli_netconf\" , task . nornir . config ) scrapli_response = scrapli_conn . lock ( target = target ) result = ScrapliResult ( host = task . host , result = process_command_result ( scrapli_response = scrapli_response ), scrapli_response = scrapli_response , changed = True , ) return result","title":"lock"},{"location":"reference/tasks/netconf/lock/#tasks.netconf.lock.netconf_lock","text":"Lock the device with scrapli_netconf Parameters: Name Type Description Default task Task nornir task object required target str configuration source to target; running|startup|candidate required Returns: Name Type Description Result Result nornir result object with Result.result value set the string result of the get operation Source code in tasks/netconf/lock.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def netconf_lock ( task : Task , target : str , ) -> Result : \"\"\" Lock the device with scrapli_netconf Args: task: nornir task object target: configuration source to target; running|startup|candidate Returns: Result: nornir result object with Result.result value set the string result of the get operation Raises: N/A \"\"\" scrapli_conn = task . host . get_connection ( \"scrapli_netconf\" , task . nornir . config ) scrapli_response = scrapli_conn . lock ( target = target ) result = ScrapliResult ( host = task . host , result = process_command_result ( scrapli_response = scrapli_response ), scrapli_response = scrapli_response , changed = True , ) return result","title":"netconf_lock()"},{"location":"reference/tasks/netconf/rpc/","text":"nornir_scrapli.tasks.netconf_rpc netconf_rpc ( task : Task , filter_ : str ) -> Result \u00b6 Send a \"bare\" rcp to the device with scrapli_netconf Parameters: Name Type Description Default task Task nornir task object required filter_ str filter/rpc to execute required Returns: Name Type Description Result Result nornir result object with Result.result value set the string result of the rpc operation Source code in tasks/netconf/rpc.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def netconf_rpc ( task : Task , filter_ : str , ) -> Result : \"\"\" Send a \"bare\" rcp to the device with scrapli_netconf Args: task: nornir task object filter_: filter/rpc to execute Returns: Result: nornir result object with Result.result value set the string result of the rpc operation Raises: N/A \"\"\" scrapli_conn = task . host . get_connection ( \"scrapli_netconf\" , task . nornir . config ) scrapli_response = scrapli_conn . rpc ( filter_ = filter_ ) result = ScrapliResult ( host = task . host , result = process_command_result ( scrapli_response = scrapli_response ), scrapli_response = scrapli_response , changed = True , ) return result","title":"rpc"},{"location":"reference/tasks/netconf/rpc/#tasks.netconf.rpc.netconf_rpc","text":"Send a \"bare\" rcp to the device with scrapli_netconf Parameters: Name Type Description Default task Task nornir task object required filter_ str filter/rpc to execute required Returns: Name Type Description Result Result nornir result object with Result.result value set the string result of the rpc operation Source code in tasks/netconf/rpc.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def netconf_rpc ( task : Task , filter_ : str , ) -> Result : \"\"\" Send a \"bare\" rcp to the device with scrapli_netconf Args: task: nornir task object filter_: filter/rpc to execute Returns: Result: nornir result object with Result.result value set the string result of the rpc operation Raises: N/A \"\"\" scrapli_conn = task . host . get_connection ( \"scrapli_netconf\" , task . nornir . config ) scrapli_response = scrapli_conn . rpc ( filter_ = filter_ ) result = ScrapliResult ( host = task . host , result = process_command_result ( scrapli_response = scrapli_response ), scrapli_response = scrapli_response , changed = True , ) return result","title":"netconf_rpc()"},{"location":"reference/tasks/netconf/unlock/","text":"nornir_scrapli.tasks.netconf_unlock netconf_unlock ( task : Task , target : str ) -> Result \u00b6 Unlock the device with scrapli_netconf Parameters: Name Type Description Default task Task nornir task object required target str configuration source to target; running|startup|candidate required Returns: Name Type Description Result Result nornir result object with Result.result value set the string result of the get operation Source code in tasks/netconf/unlock.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def netconf_unlock ( task : Task , target : str , ) -> Result : \"\"\" Unlock the device with scrapli_netconf Args: task: nornir task object target: configuration source to target; running|startup|candidate Returns: Result: nornir result object with Result.result value set the string result of the get operation Raises: N/A \"\"\" scrapli_conn = task . host . get_connection ( \"scrapli_netconf\" , task . nornir . config ) scrapli_response = scrapli_conn . unlock ( target = target ) result = ScrapliResult ( host = task . host , result = process_command_result ( scrapli_response = scrapli_response ), scrapli_response = scrapli_response , changed = True , ) return result","title":"unlock"},{"location":"reference/tasks/netconf/unlock/#tasks.netconf.unlock.netconf_unlock","text":"Unlock the device with scrapli_netconf Parameters: Name Type Description Default task Task nornir task object required target str configuration source to target; running|startup|candidate required Returns: Name Type Description Result Result nornir result object with Result.result value set the string result of the get operation Source code in tasks/netconf/unlock.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def netconf_unlock ( task : Task , target : str , ) -> Result : \"\"\" Unlock the device with scrapli_netconf Args: task: nornir task object target: configuration source to target; running|startup|candidate Returns: Result: nornir result object with Result.result value set the string result of the get operation Raises: N/A \"\"\" scrapli_conn = task . host . get_connection ( \"scrapli_netconf\" , task . nornir . config ) scrapli_response = scrapli_conn . unlock ( target = target ) result = ScrapliResult ( host = task . host , result = process_command_result ( scrapli_response = scrapli_response ), scrapli_response = scrapli_response , changed = True , ) return result","title":"netconf_unlock()"},{"location":"reference/tasks/netconf/validate/","text":"nornir_scrapli.tasks.netconf_validate netconf_validate ( task : Task , source : str ) -> Result \u00b6 Send a \"validate\" rcp to the device with scrapli_netconf Parameters: Name Type Description Default task Task nornir task object required source str configuration source to validate; typically one of running|startup|candidate required Returns: Name Type Description Result Result nornir result object with Result.result value set the string result of the get operation Source code in tasks/netconf/validate.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def netconf_validate ( task : Task , source : str , ) -> Result : \"\"\" Send a \"validate\" rcp to the device with scrapli_netconf Args: task: nornir task object source: configuration source to validate; typically one of running|startup|candidate Returns: Result: nornir result object with Result.result value set the string result of the get operation Raises: N/A \"\"\" scrapli_conn = task . host . get_connection ( \"scrapli_netconf\" , task . nornir . config ) scrapli_response = scrapli_conn . validate ( source = source ) result = ScrapliResult ( host = task . host , result = process_command_result ( scrapli_response = scrapli_response ), scrapli_response = scrapli_response , changed = False , ) return result","title":"validate"},{"location":"reference/tasks/netconf/validate/#tasks.netconf.validate.netconf_validate","text":"Send a \"validate\" rcp to the device with scrapli_netconf Parameters: Name Type Description Default task Task nornir task object required source str configuration source to validate; typically one of running|startup|candidate required Returns: Name Type Description Result Result nornir result object with Result.result value set the string result of the get operation Source code in tasks/netconf/validate.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def netconf_validate ( task : Task , source : str , ) -> Result : \"\"\" Send a \"validate\" rcp to the device with scrapli_netconf Args: task: nornir task object source: configuration source to validate; typically one of running|startup|candidate Returns: Result: nornir result object with Result.result value set the string result of the get operation Raises: N/A \"\"\" scrapli_conn = task . host . get_connection ( \"scrapli_netconf\" , task . nornir . config ) scrapli_response = scrapli_conn . validate ( source = source ) result = ScrapliResult ( host = task . host , result = process_command_result ( scrapli_response = scrapli_response ), scrapli_response = scrapli_response , changed = False , ) return result","title":"netconf_validate()"},{"location":"user_guide/available_functions/","text":"Available Functions \u00b6 print_structured_result -- this function is very similar to the \"normal\" print_result function that now ships with the nornir_utils library (historically with nornir \"core\"), except it contains several additional arguments, most importantly the parser argument allows you to select textfsm or genie to decide which parser to use to parse the unstructured data stored in the results object. Please see the structured results example here for more details.","title":"Available Functions"},{"location":"user_guide/available_functions/#available-functions","text":"print_structured_result -- this function is very similar to the \"normal\" print_result function that now ships with the nornir_utils library (historically with nornir \"core\"), except it contains several additional arguments, most importantly the parser argument allows you to select textfsm or genie to decide which parser to use to parse the unstructured data stored in the results object. Please see the structured results example here for more details.","title":"Available Functions"},{"location":"user_guide/available_tasks/","text":"Available Tasks \u00b6 All tasks presented here are methods that live in scrapli or scrapli_netconf -- these tasks are simply \"wrapped \" in such a way that they may be used within the constructs of nornir ! The links below link back to the scrapli or scrapli_netconf docs for the given method -- in all (or very nearly all?) cases, the same arguments that the underlying library supports will be exposed to nornir ! Scrapli \"core\" Tasks \u00b6 get_prompt - Get the current prompt of the device send_command - Send a single command to the device send_commands - Send a list of commands to the device send_commands_from_file - Send a list of commands from a file to the device send_config - Send a configuration to the device send_configs - Send a list of configurations to the device send_configs_from_file - Send a list of configurations from a file to the device send_interactive -\"Interact\" with the device (handle prompts and inputs and things like that) Scrapli Netconf Tasks \u00b6 Note that not all devices will support all operations! netconf_capabilities - Get list of capabilities as exchanged during netconf connection establishment netconf_commit - Commit the configuration on the device netconf_discard - Discard the configuration on the device netconf_edit_config - Edit the configuration on the device netconf_delete_config - Delete a given datastore on the device netconf_get - Get a subtree or xpath from the device netconf_get_config - Get the configuration from the device netconf_lock - Lock the datastore on the device netconf_unlock - Unlock the datastore on the device netconf_rpc - Send a \"bare\" RPC to the device netconf_validate - Execute the validate rpc against a given datastore Scrapli Cfg Tasks \u00b6 cfg_abort_config - Abort a loaded candidate config cfg_commit_config - Commit a loaded candidate config cfg_diff_config - Diff a loaded candidate config cfg_get_config - Get a target config cfg_get_version - Get the device version string cfg_load_config - Load a candidate config","title":"Available Tasks"},{"location":"user_guide/available_tasks/#available-tasks","text":"All tasks presented here are methods that live in scrapli or scrapli_netconf -- these tasks are simply \"wrapped \" in such a way that they may be used within the constructs of nornir ! The links below link back to the scrapli or scrapli_netconf docs for the given method -- in all (or very nearly all?) cases, the same arguments that the underlying library supports will be exposed to nornir !","title":"Available Tasks"},{"location":"user_guide/available_tasks/#scrapli-core-tasks","text":"get_prompt - Get the current prompt of the device send_command - Send a single command to the device send_commands - Send a list of commands to the device send_commands_from_file - Send a list of commands from a file to the device send_config - Send a configuration to the device send_configs - Send a list of configurations to the device send_configs_from_file - Send a list of configurations from a file to the device send_interactive -\"Interact\" with the device (handle prompts and inputs and things like that)","title":"Scrapli \"core\" Tasks"},{"location":"user_guide/available_tasks/#scrapli-netconf-tasks","text":"Note that not all devices will support all operations! netconf_capabilities - Get list of capabilities as exchanged during netconf connection establishment netconf_commit - Commit the configuration on the device netconf_discard - Discard the configuration on the device netconf_edit_config - Edit the configuration on the device netconf_delete_config - Delete a given datastore on the device netconf_get - Get a subtree or xpath from the device netconf_get_config - Get the configuration from the device netconf_lock - Lock the datastore on the device netconf_unlock - Unlock the datastore on the device netconf_rpc - Send a \"bare\" RPC to the device netconf_validate - Execute the validate rpc against a given datastore","title":"Scrapli Netconf Tasks"},{"location":"user_guide/available_tasks/#scrapli-cfg-tasks","text":"cfg_abort_config - Abort a loaded candidate config cfg_commit_config - Commit a loaded candidate config cfg_diff_config - Diff a loaded candidate config cfg_get_config - Get a target config cfg_get_version - Get the device version string cfg_load_config - Load a candidate config","title":"Scrapli Cfg Tasks"},{"location":"user_guide/basic_usage/","text":"Basic Usage \u00b6 Basic Information/Usage \u00b6 Nornir has historically contained it's plugins within the actual Nornir codebase itself, this however has changed! As of mid September 2020, Nornir 3.0.0 has been officially released -- this move to the 3.x.x version now expects plugins to be external to the code base. If you are looking for pre 3.x.x support, please use the 2020.09.01 version. If you have used Nornir before (pre 3.x.x), this package should be very similar to what you already know. Since the plugins used to live in Nornir you could simply import them from the appropriate package as such: 1 from nornir.plugins.tasks.networking import netconf_get_config With nornir_scrapli you simply install this package along side \"regular\" Nornir, and import the tasks from nornir_scrapli directly: 1 from nornir_scrapli.tasks import send_command As soon as a nornir_scrapli task is imported, it ( nornir_scrapli ) will register as a connection, and things should work as normal from there! The last important difference with nornir_scrapli is that in addition to the \"normal\" data in the Nornir Result object, nornir_scrapli also assigns the scrapli Response object (or list of Response objects) to the scrapli_response attribute. This means that you can access all of the \"normal\" scrapli response data from this object -- including things like elapsed_time and textfsm_parse_output : 1 2 3 4 >>> some_nornir_result [ \"sea-ios-1\" ] . scrapli_response . elapsed_time 0.039469 >>> some_nornir_result [ \"sea-ios-1\" ] . scrapli_response . textfsm_parse_output () [[ some structured data back from the device ! ]] If you would like to continue using print_result like \"normal\" in nornir, but would like to see structured data (if available) in the print_result output, you can use the nornir_scrapli print_structured_result function. This function can be imported from the scrapli functions module: 1 from nornir_scrapli.functions import print_structured_result This function acts pretty much exactly like the \"normal\" print result function, but will of course try to print the structured result. By default this will try to use textfsm to parse results, but it is of course configurable via the parser keyword argument. As scrapli will return an empty data structure if parsing fails, this may cause tasks to look like they are getting skipped in the output (nornir's print result function does not print empty lists), if you would like to fall back to printing the unparsed output you can do so by setting the fail_to_string keyword argument to True as follows: 1 print_structured_result ( my_agg_result , parser = \"genie\" , fail_to_string = True ) Using Different Transports \u00b6 nornir_scrapli supports all synchronous scrapli transport plugins. By default, the \"system\" transport will be used, however you can change this in the extras section of your nornir inventory: 1 2 3 4 5 6 7 connection_options : scrapli : port : 22 extras : ssh_config_file : True auth_strict_key : False transport : ssh2 Note that you will need to install scrapli_ssh2 or scrapli_paramiko if you want to use those transport plugins!","title":"Basic Usage"},{"location":"user_guide/basic_usage/#basic-usage","text":"","title":"Basic Usage"},{"location":"user_guide/basic_usage/#basic-informationusage","text":"Nornir has historically contained it's plugins within the actual Nornir codebase itself, this however has changed! As of mid September 2020, Nornir 3.0.0 has been officially released -- this move to the 3.x.x version now expects plugins to be external to the code base. If you are looking for pre 3.x.x support, please use the 2020.09.01 version. If you have used Nornir before (pre 3.x.x), this package should be very similar to what you already know. Since the plugins used to live in Nornir you could simply import them from the appropriate package as such: 1 from nornir.plugins.tasks.networking import netconf_get_config With nornir_scrapli you simply install this package along side \"regular\" Nornir, and import the tasks from nornir_scrapli directly: 1 from nornir_scrapli.tasks import send_command As soon as a nornir_scrapli task is imported, it ( nornir_scrapli ) will register as a connection, and things should work as normal from there! The last important difference with nornir_scrapli is that in addition to the \"normal\" data in the Nornir Result object, nornir_scrapli also assigns the scrapli Response object (or list of Response objects) to the scrapli_response attribute. This means that you can access all of the \"normal\" scrapli response data from this object -- including things like elapsed_time and textfsm_parse_output : 1 2 3 4 >>> some_nornir_result [ \"sea-ios-1\" ] . scrapli_response . elapsed_time 0.039469 >>> some_nornir_result [ \"sea-ios-1\" ] . scrapli_response . textfsm_parse_output () [[ some structured data back from the device ! ]] If you would like to continue using print_result like \"normal\" in nornir, but would like to see structured data (if available) in the print_result output, you can use the nornir_scrapli print_structured_result function. This function can be imported from the scrapli functions module: 1 from nornir_scrapli.functions import print_structured_result This function acts pretty much exactly like the \"normal\" print result function, but will of course try to print the structured result. By default this will try to use textfsm to parse results, but it is of course configurable via the parser keyword argument. As scrapli will return an empty data structure if parsing fails, this may cause tasks to look like they are getting skipped in the output (nornir's print result function does not print empty lists), if you would like to fall back to printing the unparsed output you can do so by setting the fail_to_string keyword argument to True as follows: 1 print_structured_result ( my_agg_result , parser = \"genie\" , fail_to_string = True )","title":"Basic Information/Usage"},{"location":"user_guide/basic_usage/#using-different-transports","text":"nornir_scrapli supports all synchronous scrapli transport plugins. By default, the \"system\" transport will be used, however you can change this in the extras section of your nornir inventory: 1 2 3 4 5 6 7 connection_options : scrapli : port : 22 extras : ssh_config_file : True auth_strict_key : False transport : ssh2 Note that you will need to install scrapli_ssh2 or scrapli_paramiko if you want to use those transport plugins!","title":"Using Different Transports"},{"location":"user_guide/installation/","text":"Installation \u00b6 Standard Installation \u00b6 As outlined in the quick start, you should be able to pip install scrapli \"normally\": 1 pip install nornir-scrapli Installing current master branch \u00b6 To install from the source repositories master branch: 1 pip install git+https://github.com/scrapli/nornir_scrapli Installing current develop branch \u00b6 To install from this repositories develop branch: 1 pip install -e git+https://github.com/scrapli/nornir_scrapli.git@develop#egg=nornir_scrapli Installation from Source \u00b6 To install from source: 1 2 3 git clone https://github.com/scrapli/nornir_scrapli cd nornir_scrapli python setup.py install Supported Platforms \u00b6 As for platforms to run scrapli on -- it has and will be tested on MacOS and Ubuntu regularly and should work on any POSIX system. Windows at one point was being tested very minimally via GitHub Actions builds, however this is no longer the case as it is just not worth the effort. While scrapli should work on Windows when using the paramiko or ssh2-python transport drivers, it is not \"officially\" supported. It is strongly recommended/preferred for folks to use WSL/Cygwin instead of Windows.","title":"Installation"},{"location":"user_guide/installation/#installation","text":"","title":"Installation"},{"location":"user_guide/installation/#standard-installation","text":"As outlined in the quick start, you should be able to pip install scrapli \"normally\": 1 pip install nornir-scrapli","title":"Standard Installation"},{"location":"user_guide/installation/#installing-current-master-branch","text":"To install from the source repositories master branch: 1 pip install git+https://github.com/scrapli/nornir_scrapli","title":"Installing current master branch"},{"location":"user_guide/installation/#installing-current-develop-branch","text":"To install from this repositories develop branch: 1 pip install -e git+https://github.com/scrapli/nornir_scrapli.git@develop#egg=nornir_scrapli","title":"Installing current develop branch"},{"location":"user_guide/installation/#installation-from-source","text":"To install from source: 1 2 3 git clone https://github.com/scrapli/nornir_scrapli cd nornir_scrapli python setup.py install","title":"Installation from Source"},{"location":"user_guide/installation/#supported-platforms","text":"As for platforms to run scrapli on -- it has and will be tested on MacOS and Ubuntu regularly and should work on any POSIX system. Windows at one point was being tested very minimally via GitHub Actions builds, however this is no longer the case as it is just not worth the effort. While scrapli should work on Windows when using the paramiko or ssh2-python transport drivers, it is not \"officially\" supported. It is strongly recommended/preferred for folks to use WSL/Cygwin instead of Windows.","title":"Supported Platforms"},{"location":"user_guide/project_details/","text":"Project Details \u00b6 What is nornir_scrapli \u00b6 nornir_scrapli is scrapli (and scrapli netconf's) plugin for Nornir. Nearly all (synchronous) methods of scrapli are available/exposed in nornir scrapli. So if you enjoy scrapli, but also want the built-in concurrency and inventory management afforded by nornir, this is the place to be! Supported Platforms \u00b6 nornir_scrapli supports the \"core\" scrapli drivers, the GenericDriver (for use with linux hosts generally speaking ), and the scrapli_community platforms as well! See scrapli core docs and the scrapli community docs for more info. The platform argument in the inventory data should use the \"normal\" NAPALM style platform names, generic , or the name of the scrapli_community platform (i.e. huawei_vrp )). Example platform values (for inventory data): 1 2 3 4 5 6 7 platform: cisco_iosxe platform: cisco_iosxr platform: cisco_nxos platform: arista_eos platform: juniper_junos platform: generic platform: huawei_vrp Related Scrapli Libraries \u00b6 This repo is the nornir plugin for scrapli, however there are other libraries/repos in the scrapli family -- here is a list/link to all of the other scrapli things! scrapli scrapli_netconf scrapli_community scrapli_cfg scrapli_replay","title":"Project Details"},{"location":"user_guide/project_details/#project-details","text":"","title":"Project Details"},{"location":"user_guide/project_details/#what-is-nornir_scrapli","text":"nornir_scrapli is scrapli (and scrapli netconf's) plugin for Nornir. Nearly all (synchronous) methods of scrapli are available/exposed in nornir scrapli. So if you enjoy scrapli, but also want the built-in concurrency and inventory management afforded by nornir, this is the place to be!","title":"What is nornir_scrapli"},{"location":"user_guide/project_details/#supported-platforms","text":"nornir_scrapli supports the \"core\" scrapli drivers, the GenericDriver (for use with linux hosts generally speaking ), and the scrapli_community platforms as well! See scrapli core docs and the scrapli community docs for more info. The platform argument in the inventory data should use the \"normal\" NAPALM style platform names, generic , or the name of the scrapli_community platform (i.e. huawei_vrp )). Example platform values (for inventory data): 1 2 3 4 5 6 7 platform: cisco_iosxe platform: cisco_iosxr platform: cisco_nxos platform: arista_eos platform: juniper_junos platform: generic platform: huawei_vrp","title":"Supported Platforms"},{"location":"user_guide/project_details/#related-scrapli-libraries","text":"This repo is the nornir plugin for scrapli, however there are other libraries/repos in the scrapli family -- here is a list/link to all of the other scrapli things! scrapli scrapli_netconf scrapli_community scrapli_cfg scrapli_replay","title":"Related Scrapli Libraries"},{"location":"user_guide/quickstart/","text":"Quick Start Guide \u00b6 Installation \u00b6 In most cases installation via pip is the simplest and best way to install nornir_scrapli. 1 pip install nornir-scrapli A Simple Example \u00b6 Example config file: 1 2 3 4 5 6 7 --- inventory : plugin : YAMLInventory options : host_file : \"nornir_data/hosts.yaml\" group_file : \"nornir_data/groups.yaml\" defaults_file : \"nornir_data/defaults.yaml\" Example inventory file (host/group/default, see \"real\" Nornir docs for lots more info!) -- please notice that there is a scrapli and a scrapli_netconf connection type here!: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 --- iosxe-1 : hostname : 172.18.0.11 connection_options : scrapli : platform : cisco_iosxe port : 22 extras : ssh_config_file : True auth_strict_key : False scrapli_netconf : port : 830 extras : ssh_config_file : True auth_strict_key : False NOTE: scrapli-netconf has no concept (at the moment!) of \"platforms\" - it simply implements RFC compliant NETCONF RPCs, so you do not need to pass iosxr , junos or anything like that to the scrapli_netconf connection options section! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from nornir import InitNornir from nornir_scrapli.tasks import ( get_prompt , send_command , send_configs ) nr = InitNornir ( config_file = \"nornir_data/config.yaml\" ) prompt_results = nr . run ( task = get_prompt ) command_results = nr . run ( task = send_command , command = \"show version\" ) config_results = nr . run ( task = send_configs , configs = [ \"interface loopback123\" , \"description nornir_scrapli was here\" ], ) print ( \"get_prompt result:\" ) print ( prompt_results [ \"iosxe-1\" ] . result ) print ( \"send_command result:\" ) print ( command_results [ \"iosxe-1\" ] . result ) print ( \"send_configs result:\" ) print ( config_results [ \"iosxe-1\" ] . result ) 1 2 3 4 5 6 7 $ python my_scrapli_script.py get_prompt result: 3560CX# send_command result: Cisco IOS Software, C3560CX Software (C3560CX-UNIVERSALK9-M), Version 15.2(4)E7, RELEASE SOFTWARE (fc2) <SNIP> send_configs result: Netconf tasks are imported from the same package and in the same fashion as the \"core\" scrapli tasks: 1 2 3 4 5 6 7 8 from nornir_scrapli.tasks import ( netconf_lock , netconf_unlock , netconf_edit_config , netconf_get , netconf_get_config , netconf_rpc ) And are executed in the same fashion as well: 1 2 3 4 5 6 7 8 9 10 11 config = \"\"\"<config> <interfaces xmlns=\"urn:ietf:params:xml:ns:yang:ietf-interfaces\"> <interface> <name>GigabitEthernet1</name> <description>scrapli was here!</description> </interface> </interfaces> </config>\"\"\" result = nr . run ( task = netconf_edit_config , config = config ) print ( result [ 'iosxe1' ][ 0 ] . result ) print ( result [ 'iosxe1' ][ 0 ] . scrapli_response . xml_result ) When using the scrapli-netconf tasks the result object result will be the string of the returned data from the device. As with all other nornir-scrapli results, the scrapli_response object will be assigned to the Result object and will contain all of the \"normal\" scrapli response object data (or scrapli-netconf response data ), such as the elapsed_time , raw_result , xml_result , etc. -- you can see this in the above example! Additional Examples \u00b6 NETCONF Usage Structured Data","title":"Quick Start Guide"},{"location":"user_guide/quickstart/#quick-start-guide","text":"","title":"Quick Start Guide"},{"location":"user_guide/quickstart/#installation","text":"In most cases installation via pip is the simplest and best way to install nornir_scrapli. 1 pip install nornir-scrapli","title":"Installation"},{"location":"user_guide/quickstart/#a-simple-example","text":"Example config file: 1 2 3 4 5 6 7 --- inventory : plugin : YAMLInventory options : host_file : \"nornir_data/hosts.yaml\" group_file : \"nornir_data/groups.yaml\" defaults_file : \"nornir_data/defaults.yaml\" Example inventory file (host/group/default, see \"real\" Nornir docs for lots more info!) -- please notice that there is a scrapli and a scrapli_netconf connection type here!: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 --- iosxe-1 : hostname : 172.18.0.11 connection_options : scrapli : platform : cisco_iosxe port : 22 extras : ssh_config_file : True auth_strict_key : False scrapli_netconf : port : 830 extras : ssh_config_file : True auth_strict_key : False NOTE: scrapli-netconf has no concept (at the moment!) of \"platforms\" - it simply implements RFC compliant NETCONF RPCs, so you do not need to pass iosxr , junos or anything like that to the scrapli_netconf connection options section! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from nornir import InitNornir from nornir_scrapli.tasks import ( get_prompt , send_command , send_configs ) nr = InitNornir ( config_file = \"nornir_data/config.yaml\" ) prompt_results = nr . run ( task = get_prompt ) command_results = nr . run ( task = send_command , command = \"show version\" ) config_results = nr . run ( task = send_configs , configs = [ \"interface loopback123\" , \"description nornir_scrapli was here\" ], ) print ( \"get_prompt result:\" ) print ( prompt_results [ \"iosxe-1\" ] . result ) print ( \"send_command result:\" ) print ( command_results [ \"iosxe-1\" ] . result ) print ( \"send_configs result:\" ) print ( config_results [ \"iosxe-1\" ] . result ) 1 2 3 4 5 6 7 $ python my_scrapli_script.py get_prompt result: 3560CX# send_command result: Cisco IOS Software, C3560CX Software (C3560CX-UNIVERSALK9-M), Version 15.2(4)E7, RELEASE SOFTWARE (fc2) <SNIP> send_configs result: Netconf tasks are imported from the same package and in the same fashion as the \"core\" scrapli tasks: 1 2 3 4 5 6 7 8 from nornir_scrapli.tasks import ( netconf_lock , netconf_unlock , netconf_edit_config , netconf_get , netconf_get_config , netconf_rpc ) And are executed in the same fashion as well: 1 2 3 4 5 6 7 8 9 10 11 config = \"\"\"<config> <interfaces xmlns=\"urn:ietf:params:xml:ns:yang:ietf-interfaces\"> <interface> <name>GigabitEthernet1</name> <description>scrapli was here!</description> </interface> </interfaces> </config>\"\"\" result = nr . run ( task = netconf_edit_config , config = config ) print ( result [ 'iosxe1' ][ 0 ] . result ) print ( result [ 'iosxe1' ][ 0 ] . scrapli_response . xml_result ) When using the scrapli-netconf tasks the result object result will be the string of the returned data from the device. As with all other nornir-scrapli results, the scrapli_response object will be assigned to the Result object and will contain all of the \"normal\" scrapli response object data (or scrapli-netconf response data ), such as the elapsed_time , raw_result , xml_result , etc. -- you can see this in the above example!","title":"A Simple Example"},{"location":"user_guide/quickstart/#additional-examples","text":"NETCONF Usage Structured Data","title":"Additional Examples"},{"location":"user_guide/versioning/","text":"Versioning \u00b6 Please see the scrapli \"core\" here documentation for versioning information.","title":"Versioning"},{"location":"user_guide/versioning/#versioning","text":"Please see the scrapli \"core\" here documentation for versioning information.","title":"Versioning"}]}